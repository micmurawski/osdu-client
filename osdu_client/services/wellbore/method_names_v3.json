{
    "post:/alpha/ddms/v3/query/wellbores": [
        "query_alpha_query_wellbores",
        "Query with cursor or offset, get wellbores",
        "Get Wellbores object by name.  \n             The wellbore kind is *:wks:master-data--Wellbore:*  \n             Returns all records directly based on existing schemas. The query is done on data.FacilityName field  \n               \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/alpha/ddms/v3/query/wellbores/{wellboreId}/wellboretrajectories": [
        "query_alpha_query_wellbores_wellboretrajectories",
        "Query with cursor, search wellbore trajectories by wellbore ID",
        "Get all Wellbore Trajectories objects using its relationship Wellbore ID.  <p>All Wellbore Trajectories linked to this\n            specific ID will be returned</p>\n            <p>The Wellbore Trajectories kind is *:wks:work-product-component--WellboreTrajectory:* returns all records directly based on existing schemas</p>  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/alpha/ddms/v3/query/welllogs": [
        "query_alpha_query_welllogs",
        "Query with cursor, search WellLogs by name and optionally by wellbore ID and curves mnemonics",
        "Get all WellLogs objects using its name and optionally relationship Wellbore ID. Filtering can be done on curves mnemonics\n            <p>The WellLogs kind is *:wks:work-product-component--WellLog:* returns all records directly based on existing schemas. The query is done on data.Name field</p>  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/query/wellbore/{wellboreAttribute}/welllogs": [
        "create_query_wellbore_welllogs",
        "Query with cursor, search WellLogs by wellbore attribute",
        "Get all WellLogs object using a specific attribute of Wellbores.  <p>All WellLogs linked to Wellbores\n            with this specific attribute will be returned</p>\n            <p>The WellLogs kind is *:wks:work-product-component--WellLog:* returns all records directly based on existing schemas</p>  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/query/wellbores/{wellboreId}/wellboremarkersets": [
        "create_query_wellbores_wellboremarkersets",
        "Query with cursor, search wellbore markersets by wellbore ID",
        "Get all Wellbore Markersets objects using its relationship Wellbore ID.  <p>All Markers linked to this\n            specific ID will be returned</p>\n            <p>The Wellbore Markerset kind is *:wks:work-product-component--WellboreMarkerSet:* returns all records directly based on existing schemas</p>  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/query/wellbores/{wellboreId}/welllogs": [
        "create_query_wellbores_welllogs",
        "Query with cursor, search WellLogs by wellbore ID",
        "Get all WellLogs object using its relationship Wellbore ID.  <p>All WellLogs linked to this\n            specific ID will be returned</p>\n            <p>The WellLogs kind is *:wks:work-product-component--WellLog:* returns all records directly based on existing schemas</p>  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/wellboreintervalsets": [
        "create_or_update_wellbore_interval_set",
        "Create or update the WellboreIntervalSet using osdu schema",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "delete:/ddms/v3/wellboreintervalsets/{wellboreintervalsetsid}": [
        "delete_wellbore_interval_set",
        "Delete the WellboreIntervalSetId. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/wellboreintervalsets/{wellboreintervalsetsid}": [
        "get_wellbore_interval_set",
        "Get the WellboreIntervalSet using osdu schema",
        "Get the WellboreIntervalSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wellboreintervalsets/{wellboreintervalsetsid}/versions": [
        "get_versions_wellbore_interval_set",
        "Get all versions of the WellboreIntervalSet",
        "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wellboreintervalsets/{wellboreintervalsetsid}/versions/{version}": [
        "get_wellbore_interval_sets_versions",
        "Get the given version of the WellboreIntervalSet using OSDU WellboreIntervalSetId schema",
        "Get the WellboreIntervalSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/wellboremarkersets": [
        "create_wellbore_markerset",
        "Create or update the Wellbore Markerset using osdu schema",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "delete:/ddms/v3/wellboremarkersets/{wellboremarkersetid}": [
        "delete_wellbore_markerset",
        "Delete the wellboreMarkerset. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/wellboremarkersets/{wellboremarkersetid}": [
        "get_wellboremarkersets",
        "Get the WellboreMarkerSet using osdu schema",
        "Get the WellboreMarkerSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wellboremarkersets/{wellboremarkersetid}/versions": [
        "get_wellboremarkerset_versions",
        "Get all versions of the wellbore_markerset",
        "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wellboremarkersets/{wellboremarkersetid}/versions/{version}": [
        "get_wellboremarkersets_versions",
        "Get the given version of the WellboreMarkerSet using OSDU WellboreMarkerset schema",
        "\"Get the WellboreMarkerSet object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/wellbores": [
        "create_or_update_wellbore_v3",
        "Create or update the Wellbores using osdu schema",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "delete:/ddms/v3/wellbores/{wellboreid}": [
        "delete_wellbore",
        "Delete the wellbore. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/wellbores/{wellboreid}": [
        "get_wellbore",
        "Get the Wellbore using osdu schema",
        "Get the Wellbore object using its **id**.  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wellbores/{wellboreid}/versions": [
        "get_wellbore_versions",
        "Get all versions of the Wellbore",
        "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wellbores/{wellboreid}/versions/{version}": [
        "get_wellbores_versions",
        "Get the given version of the Wellbore using OSDU wellbore schema",
        "\"Get the Wellbore object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/wellboretrajectories": [
        "create_wellboretrajectories",
        "Create or update the WellboreTrajectories using osdu schema",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/wellboretrajectories/{record_id}/data": [
        "get_wellboretrajectories_data",
        "Returns the data according to the specified query parameters.",
        "Returns the data according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using _describe_ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter _curves_ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)"
    ],
    "post:/ddms/v3/wellboretrajectories/{record_id}/data": [
        "create_wellboretrajectories_data",
        "Writes data as a whole bulk, creates a new version.",
        "Writes data to the associated record. It creates a new version.\nPayload is expected to contain the entire bulk which will replace as latest version\nany previous bulk. Previous bulk versions are accessible via the get bulk data version API.\nSupport JSON and Parquet format ('Content_Type' must be set accordingly).\nSupport http chunked encoding transfer.\n  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins\n  \n**Important**: In order to minimize writing time, it's necessary to:  \n- Double check whether bulk data is big enough to be sent with chunking APIs: meaning > 10 millions values or > 500 columns\n    - If no, use instead POST /ddms/v3/welllogs/MY_RECORD_ID/data API\n- Ensure all curve's values are in the same chunk to be sent\n- Each chunk should contain as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)"
    ],
    "get:/ddms/v3/wellboretrajectories/{record_id}/sessions": [
        "list_records_sessions_v3",
        "list session of the given record.",
        ""
    ],
    "post:/ddms/v3/wellboretrajectories/{record_id}/sessions": [
        "create_wellboretrajectories_sessions",
        "Create a new session on the given record for writing bulk data.",
        "Initiate a session based on record version provided. The session is isolated from any other modifications. Inside a session, individual chunk doesn't generate new individual version. A new single version is created only at session completion 'aggregating' all updates. A typical workflow is:\n1. create a session\n2. send X chunks (can be parallelized)\n3. commit the session\n\nSession has an expiry time. If the session is not completed before, it's automatically dropped. The session duration is specified in the request but cannot exceeds 24 hours."
    ],
    "get:/ddms/v3/wellboretrajectories/{record_id}/sessions/{session_id}": [
        "get_record_session_v3",
        "get session.",
        ""
    ],
    "patch:/ddms/v3/wellboretrajectories/{record_id}/sessions/{session_id}": [
        "patch_wellboretrajectories_sessions",
        "Update a session, either commit or abandon.",
        "Either validates the session' bulk data, a new version of record will be created with data sent \n                within the session. Either abandon the session, and let record unchanged.  \n                Note: bulk data consistency check will be run when committing bulk data."
    ],
    "post:/ddms/v3/wellboretrajectories/{record_id}/sessions/{session_id}/data": [
        "create_wellboretrajectories_sessions_data",
        "Send a data chunk. Session must be complete/commit once all chunks are sent.",
        "Send a data chunk. Session must be complete/commit once all chunks are sent. This will create a new and single version aggregating all and previous bulk.Support JSON and Parquet format ('Content_Type' must be set accordingly). Support http chunked encoding.  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/wellboretrajectories/{record_id}/versions/{version}/data": [
        "get_returns_data_specified_version",
        "Returns data of the specified version.",
        "Returns the data of a specific version according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using _describe_ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter _curves_ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)"
    ],
    "delete:/ddms/v3/wellboretrajectories/{wellboretrajectoryid}": [
        "delete_wellboretrajectories",
        "Delete the wellboreTrajectory. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/wellboretrajectories/{wellboretrajectoryid}": [
        "get_wellboretrajectories",
        "Get the WellboreTrajectory using osdu schema",
        "Get the WellboreTrajectory object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wellboretrajectories/{wellboretrajectoryid}/versions": [
        "get_versions_wellboretrajectory",
        "Get all versions of the WellboreTrajectory",
        "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wellboretrajectories/{wellboretrajectoryid}/versions/{version}": [
        "get_wellboretrajectories_versions",
        "Get the given version of the WellboreTrajectory using OSDU wellboreTrajectory schema",
        "\"Get the WellboreTrajectory object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/welllogs": [
        "create_welllogs",
        "Create or update the WellLogs using osdu schema",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/welllogs/{record_id}/data": [
        "get_welllogs_data",
        "Returns the data according to the specified query parameters.",
        "Returns the data according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using _describe_ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter _curves_ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)"
    ],
    "post:/ddms/v3/welllogs/{record_id}/data": [
        "create_welllogs_data",
        "Writes data as a whole bulk, creates a new version.",
        "Writes data to the associated record. It creates a new version.\nPayload is expected to contain the entire bulk which will replace as latest version\nany previous bulk. Previous bulk versions are accessible via the get bulk data version API.\nSupport JSON and Parquet format ('Content_Type' must be set accordingly).\nSupport http chunked encoding transfer.\n  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins\n  \n**Important**: In order to minimize writing time, it's necessary to:  \n- Double check whether bulk data is big enough to be sent with chunking APIs: meaning > 10 millions values or > 500 columns\n    - If no, use instead POST /ddms/v3/welllogs/MY_RECORD_ID/data API\n- Ensure all curve's values are in the same chunk to be sent\n- Each chunk should contain as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)"
    ],
    "get:/ddms/v3/welllogs/{record_id}/data/statistics": [
        "get_welllogs_data_statistics",
        "Returns statistics of record's data for selected curves",
        "Returns the statistics on bulk data identified by the record in its last version. \n\n    \nIf wanted curves is an array:  \n    - requests \"ARRAY\" retrieves all dimensions of the array  \n    - requests \"ARRAY[M:N]\", retrieves all dimensions between M and N.\n  \n    \n    \nData types supported:  \n            - int  \n            - float  \n            - date  \n  \n      \n    No unit conversion is supported. Statistics will be returned using the same units as recorded in Curves[].CurveUnit"
    ],
    "get:/ddms/v3/welllogs/{record_id}/sessions": [
        "list_session_given_record",
        "list session of the given record.",
        ""
    ],
    "post:/ddms/v3/welllogs/{record_id}/sessions": [
        "create_welllogs_sessions",
        "Create a new session on the given record for writing bulk data.",
        "Initiate a session based on record version provided. The session is isolated from any other modifications. Inside a session, individual chunk doesn't generate new individual version. A new single version is created only at session completion 'aggregating' all updates. A typical workflow is:\n1. create a session\n2. send X chunks (can be parallelized)\n3. commit the session\n\nSession has an expiry time. If the session is not completed before, it's automatically dropped. The session duration is specified in the request but cannot exceeds 24 hours."
    ],
    "get:/ddms/v3/welllogs/{record_id}/sessions/{session_id}": [
        "get_session",
        "get session.",
        ""
    ],
    "patch:/ddms/v3/welllogs/{record_id}/sessions/{session_id}": [
        "update_welllogs_sessions",
        "Update a session, either commit or abandon.",
        "Either validates the session' bulk data, a new version of record will be created with data sent \n                within the session. Either abandon the session, and let record unchanged.  \n                Note: bulk data consistency check will be run when committing bulk data."
    ],
    "post:/ddms/v3/welllogs/{record_id}/sessions/{session_id}/data": [
        "send_welllog_sessions_data",
        "Send a data chunk. Session must be complete/commit once all chunks are sent.",
        "Send a data chunk. Session must be complete/commit once all chunks are sent. This will create a new and single version aggregating all and previous bulk.Support JSON and Parquet format ('Content_Type' must be set accordingly). Support http chunked encoding.  \nRequired roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/welllogs/{record_id}/versions/{version}/data": [
        "get_welllog_version_data",
        "Returns data of the specified version.",
        "Returns the data of a specific version according to the specified query parameters.  \nMultiple media types response are available (\"application/json\", \"application/x-parquet\").  \nThe desired format can be specify in the \"Accept\" header, default is Parquet.  \n\nWhen bulk statistics are requested using _describe_ query parameter, the response is always provided in JSON.  \nThe requested columns must not exceed 500. \nThe query parameter _curves_ can be use to limit the number of columns.  \n  \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data.\n  \n**Important**: In order to minimize reading time.\n\n1. Partial reading\n    - Select only needed columns\n    \nNote: using curves filtering has a cost, use it only if it reduces significantly the amount of retrieved bulk data.\n\n2. Full reading\n    - Try to read all the curves, if those errors are returned go to next steps:\n        - HTTP 400 \"Too many columns requested\"\n        - HTTP 400 \"Too many values requested\"\n        - HTTP 413 \"the resource requested exceeds the limit\" (When WDDMS worker are enabled)\n    - Get curve names and number of rows per curve by using describe parameter\n       - Each request should fetch as many as columns it is possible until upper limits are reached (> 10 millions values or > 500 columns)"
    ],
    "get:/ddms/v3/welllogs/{record_id}/versions/{version}/data/statistics": [
        "get_welllog_version_data_statistics",
        "Returns statistics of record's data for selected curves at requested version",
        "Returns the statistics on bulk data identified by the record and given version.  \n    \nIf wanted curves is an array:  \n    - requests \"ARRAY\" retrieves all dimensions of the array  \n    - requests \"ARRAY[M:N]\", retrieves all dimensions between M and N.\n  \n      \n    \nData types supported:  \n            - int  \n            - float  \n            - date  \n  \n    \n    No unit conversion is supported. Statistics will be returned using the same units as recorded in Curves[].CurveUnit"
    ],
    "post:/ddms/v3/welllogs/{record_id}/versions/{version}/data/statistics": [
        "trigger_welllog_version_data_statistics",
        "Trigger computations of record's data statistics of record's data",
        "Trigger the computation of statistics on bulk data for \n    the record identified by the record_id at its last version   \n\n    No unit conversion is supported. Statistics will be returned using the same units as recorded in Curves[].CurveUnit"
    ],
    "delete:/ddms/v3/welllogs/{welllogid}": [
        "delete_welllog",
        "Delete the welllog. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/welllogs/{welllogid}": [
        "get_welllog",
        "Get the WellLog using osdu schema",
        "Get the WellLog object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/welllogs/{welllogid}/versions": [
        "get_welllog_versions",
        "Get all versions of the WellLog",
        "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/welllogs/{welllogid}/versions/{version}": [
        "get_welllog_version",
        "Get the given version of the WellLog using OSDU welllog schema",
        "\"Get the WellLog object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "post:/ddms/v3/wells": [
        "create_or_update_wells",
        "Create or update the Wells using osdu schema",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "delete:/ddms/v3/wells/{wellid}": [
        "delete_well",
        "Delete the well. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
        "Required roles: 'users.datalake.editors' or 'users.datalake.admins"
    ],
    "get:/ddms/v3/wells/{wellid}": [
        "get_well",
        "Get the Well using osdu schema",
        "Get the Well object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wells/{wellid}/versions": [
        "get_well_versions",
        "Get all versions of the Well",
        "Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ],
    "get:/ddms/v3/wells/{wellid}/versions/{version}": [
        "get_well_version",
        "Get the given version of the Well using OSDU well schema",
        "\"Get the Well object using its **id**.   \nRequired roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'.\nIn addition, users must be a member of data groups to access the data."
    ]
}