{
  "openapi": "3.0.3",
  "info": {
    "title": "Rock and Fluid Sample DDMS",
    "description": "OSDU Rock and Fluid Sample DDMS",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.2.0"
  },
  "paths": {
    "/metrics": {
      "get": {
        "summary": "Metrics",
        "description": "Endpoint that serves Prometheus metrics.",
        "operationId": "metrics_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          }
        }
      }
    },
    "/api/rafs-ddms/info": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get Info",
        "description": "Get application info.\n\n:return: application info\n:rtype: InfoResponse",
        "operationId": "get_info_api_rafs_ddms_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/rafs-ddms/v1/rocksampleanalyses/{record_id}/rca/data/{dataset_id}": {
      "get": {
        "tags": [
          "rocksampleanalyses (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `RockSampleAnalysis` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_rocksampleanalyses__record_id__rca_data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--RockSampleAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:routine-core-analysis[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksampleanalyses/{record_id}/rca/data": {
      "post": {
        "tags": [
          "rocksampleanalyses (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `RockSampleAnalysis` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_rocksampleanalyses__record_id__rca_data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--RockSampleAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Rocksampleanalyses  Record Id  Rca Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksampleanalyses/{record_id}/rca/source": {
      "get": {
        "tags": [
          "rocksampleanalyses (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_rocksampleanalyses__record_id__rca_source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--RockSampleAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksampleanalyses/{record_id}": {
      "get": {
        "tags": [
          "rocksampleanalyses (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `RockSampleAnalysis` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_rocksampleanalyses__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--RockSampleAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Rocksampleanalyses  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "rocksampleanalyses (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `RockSampleAnalysis` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_rocksampleanalyses__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--RockSampleAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksampleanalyses/{record_id}/versions": {
      "get": {
        "tags": [
          "rocksampleanalyses (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `RockSampleAnalysis` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_rocksampleanalyses__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--RockSampleAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Rocksampleanalyses  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksampleanalyses/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "rocksampleanalyses (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `RockSampleAnalysis` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_rocksampleanalyses__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--RockSampleAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Rocksampleanalyses  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksampleanalyses": {
      "post": {
        "tags": [
          "rocksampleanalyses (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `RockSampleAnalysis` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_rocksampleanalyses_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/coringreports/{record_id}": {
      "get": {
        "tags": [
          "coringreports (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `Coring` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_coringreports__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:master-data--Coring:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Coringreports  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "coringreports (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `Coring` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_coringreports__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:master-data--Coring:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/coringreports/{record_id}/versions": {
      "get": {
        "tags": [
          "coringreports (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `Coring` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_coringreports__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:master-data--Coring:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Coringreports  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/coringreports/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "coringreports (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `Coring` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_coringreports__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:master-data--Coring:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Coringreports  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/coringreports": {
      "post": {
        "tags": [
          "coringreports (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `Coring` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_coringreports_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksamples/{record_id}": {
      "get": {
        "tags": [
          "rocksamples (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `RockSample` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_rocksamples__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:master-data--RockSample:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Rocksamples  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "rocksamples (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `RockSample` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_rocksamples__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:master-data--RockSample:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksamples/{record_id}/versions": {
      "get": {
        "tags": [
          "rocksamples (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `RockSample` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_rocksamples__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:master-data--RockSample:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Rocksamples  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksamples/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "rocksamples (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `RockSample` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_rocksamples__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:master-data--RockSample:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Rocksamples  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rocksamples": {
      "post": {
        "tags": [
          "rocksamples (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `RockSample` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_rocksamples_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/pvtreports/{record_id}": {
      "get": {
        "tags": [
          "pvtreports (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `PVT` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_pvtreports__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--PVT:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Pvtreports  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "pvtreports (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `PVT` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_pvtreports__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--PVT:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/pvtreports/{record_id}/versions": {
      "get": {
        "tags": [
          "pvtreports (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `PVT` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_pvtreports__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--PVT:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Pvtreports  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/pvtreports/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "pvtreports (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `PVT` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_pvtreports__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--PVT:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Pvtreports  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/pvtreports": {
      "post": {
        "tags": [
          "pvtreports (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `PVT` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_pvtreports_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/OsduStorageRecord"
                },
                "type": "array",
                "title": "Records List"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/pvtreports/{record_id}/source": {
      "get": {
        "tags": [
          "pvtreports (deprecated)"
        ],
        "summary": "Get Source Data",
        "operationId": "get_source_data_api_rafs_ddms_v1_pvtreports__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--PVT:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/ccereports/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "ccereports (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `ConstantCompositionExpansionTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_ccereports__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantCompositionExpansionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:constant-composition-expansion[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/ccereports/{record_id}/data": {
      "post": {
        "tags": [
          "ccereports (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `ConstantCompositionExpansionTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_ccereports__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantCompositionExpansionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Ccereports  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/ccereports/{record_id}/source": {
      "get": {
        "tags": [
          "ccereports (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_ccereports__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantCompositionExpansionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/ccereports/{record_id}": {
      "get": {
        "tags": [
          "ccereports (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `ConstantCompositionExpansionTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_ccereports__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantCompositionExpansionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Ccereports  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ccereports (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `ConstantCompositionExpansionTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_ccereports__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantCompositionExpansionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/ccereports/{record_id}/versions": {
      "get": {
        "tags": [
          "ccereports (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `ConstantCompositionExpansionTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_ccereports__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantCompositionExpansionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Ccereports  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/ccereports/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "ccereports (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `ConstantCompositionExpansionTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_ccereports__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantCompositionExpansionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Ccereports  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/ccereports": {
      "post": {
        "tags": [
          "ccereports (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `ConstantCompositionExpansionTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_ccereports_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/difflibreports/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "difflibreports (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `DifferentialLiberationTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_difflibreports__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--DifferentialLiberationTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:differential-liberation[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/difflibreports/{record_id}/data": {
      "post": {
        "tags": [
          "difflibreports (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `DifferentialLiberationTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_difflibreports__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--DifferentialLiberationTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Difflibreports  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/difflibreports/{record_id}/source": {
      "get": {
        "tags": [
          "difflibreports (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_difflibreports__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--DifferentialLiberationTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/difflibreports/{record_id}": {
      "get": {
        "tags": [
          "difflibreports (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `DifferentialLiberationTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_difflibreports__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--DifferentialLiberationTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Difflibreports  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "difflibreports (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `DifferentialLiberationTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_difflibreports__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--DifferentialLiberationTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/difflibreports/{record_id}/versions": {
      "get": {
        "tags": [
          "difflibreports (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `DifferentialLiberationTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_difflibreports__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--DifferentialLiberationTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Difflibreports  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/difflibreports/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "difflibreports (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `DifferentialLiberationTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_difflibreports__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--DifferentialLiberationTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Difflibreports  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/difflibreports": {
      "post": {
        "tags": [
          "difflibreports (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `DifferentialLiberationTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_difflibreports_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/transporttests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "transporttests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `TransportTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_transporttests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--TransportTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:transport-test[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/transporttests/{record_id}/data": {
      "post": {
        "tags": [
          "transporttests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `TransportTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_transporttests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--TransportTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Transporttests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/transporttests/{record_id}/source": {
      "get": {
        "tags": [
          "transporttests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_transporttests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--TransportTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/transporttests/{record_id}": {
      "get": {
        "tags": [
          "transporttests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `TransportTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_transporttests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--TransportTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Transporttests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "transporttests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `TransportTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_transporttests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--TransportTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/transporttests/{record_id}/versions": {
      "get": {
        "tags": [
          "transporttests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `TransportTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_transporttests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--TransportTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Transporttests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/transporttests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "transporttests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `TransportTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_transporttests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--TransportTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Transporttests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/transporttests": {
      "post": {
        "tags": [
          "transporttests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `TransportTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_transporttests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/compositionalanalysisreports/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "compositionalanalysisreports (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `CompositionAnalysisTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_compositionalanalysisreports__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--CompositionalAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:compositionalanalysis[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/compositionalanalysisreports/{record_id}/data": {
      "post": {
        "tags": [
          "compositionalanalysisreports (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `CompositionAnalysisTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_compositionalanalysisreports__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--CompositionalAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Compositionalanalysisreports  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/compositionalanalysisreports/{record_id}/source": {
      "get": {
        "tags": [
          "compositionalanalysisreports (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_compositionalanalysisreports__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--CompositionalAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/compositionalanalysisreports/{record_id}": {
      "get": {
        "tags": [
          "compositionalanalysisreports (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `CompositionAnalysisTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_compositionalanalysisreports__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--CompositionalAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Compositionalanalysisreports  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "compositionalanalysisreports (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `CompositionAnalysisTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_compositionalanalysisreports__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--CompositionalAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/compositionalanalysisreports/{record_id}/versions": {
      "get": {
        "tags": [
          "compositionalanalysisreports (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `CompositionAnalysisTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_compositionalanalysisreports__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--CompositionalAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Compositionalanalysisreports  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/compositionalanalysisreports/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "compositionalanalysisreports (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `CompositionAnalysisTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_compositionalanalysisreports__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--CompositionalAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Compositionalanalysisreports  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/compositionalanalysisreports": {
      "post": {
        "tags": [
          "compositionalanalysisreports (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `CompositionAnalysisTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_compositionalanalysisreports_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multistageseparatortests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "multistageseparatortests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `MultiStageSeparatorTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_multistageseparatortests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultiStageSeparatorTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:multi-stage-separator[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multistageseparatortests/{record_id}/data": {
      "post": {
        "tags": [
          "multistageseparatortests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `MultiStageSeparatorTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_multistageseparatortests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultiStageSeparatorTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Multistageseparatortests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multistageseparatortests/{record_id}/source": {
      "get": {
        "tags": [
          "multistageseparatortests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_multistageseparatortests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultiStageSeparatorTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multistageseparatortests/{record_id}": {
      "get": {
        "tags": [
          "multistageseparatortests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `MultiStageSeparatorTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_multistageseparatortests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultiStageSeparatorTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Multistageseparatortests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "multistageseparatortests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `MultiStageSeparatorTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_multistageseparatortests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultiStageSeparatorTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multistageseparatortests/{record_id}/versions": {
      "get": {
        "tags": [
          "multistageseparatortests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `MultiStageSeparatorTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_multistageseparatortests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultiStageSeparatorTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Multistageseparatortests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multistageseparatortests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "multistageseparatortests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `MultiStageSeparatorTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_multistageseparatortests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultiStageSeparatorTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Multistageseparatortests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multistageseparatortests": {
      "post": {
        "tags": [
          "multistageseparatortests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `MultiStageSeparatorTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_multistageseparatortests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/swellingtests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "swellingtests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `SwellingTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_swellingtests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SwellingTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:swelling[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/swellingtests/{record_id}/data": {
      "post": {
        "tags": [
          "swellingtests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `SwellingTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_swellingtests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SwellingTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Swellingtests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/swellingtests/{record_id}/source": {
      "get": {
        "tags": [
          "swellingtests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_swellingtests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SwellingTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/swellingtests/{record_id}": {
      "get": {
        "tags": [
          "swellingtests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `SwellingTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_swellingtests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SwellingTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Swellingtests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "swellingtests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `SwellingTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_swellingtests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SwellingTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/swellingtests/{record_id}/versions": {
      "get": {
        "tags": [
          "swellingtests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `SwellingTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_swellingtests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SwellingTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Swellingtests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/swellingtests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "swellingtests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `SwellingTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_swellingtests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SwellingTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Swellingtests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/swellingtests": {
      "post": {
        "tags": [
          "swellingtests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `SwellingTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_swellingtests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/constantvolumedepletiontests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "constantvolumedepletiontests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `ConstantVolumeDepletionTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_constantvolumedepletiontests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantVolumeDepletionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:constantvolumedepletiontest[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/constantvolumedepletiontests/{record_id}/data": {
      "post": {
        "tags": [
          "constantvolumedepletiontests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `ConstantVolumeDepletionTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_constantvolumedepletiontests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantVolumeDepletionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Constantvolumedepletiontests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/constantvolumedepletiontests/{record_id}/source": {
      "get": {
        "tags": [
          "constantvolumedepletiontests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_constantvolumedepletiontests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantVolumeDepletionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/constantvolumedepletiontests/{record_id}": {
      "get": {
        "tags": [
          "constantvolumedepletiontests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `ConstantVolumeDepletionTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_constantvolumedepletiontests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantVolumeDepletionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Constantvolumedepletiontests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "constantvolumedepletiontests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `ConstantVolumeDepletionTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_constantvolumedepletiontests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantVolumeDepletionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/constantvolumedepletiontests/{record_id}/versions": {
      "get": {
        "tags": [
          "constantvolumedepletiontests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `ConstantVolumeDepletionTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_constantvolumedepletiontests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantVolumeDepletionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Constantvolumedepletiontests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/constantvolumedepletiontests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "constantvolumedepletiontests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `ConstantVolumeDepletionTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_constantvolumedepletiontests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--ConstantVolumeDepletionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Constantvolumedepletiontests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/constantvolumedepletiontests": {
      "post": {
        "tags": [
          "constantvolumedepletiontests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `ConstantVolumeDepletionTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_constantvolumedepletiontests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/wateranalysisreports/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "wateranalysisreports (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `WaterAnalysisTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_wateranalysisreports__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--WaterAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:wateranalysis[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/wateranalysisreports/{record_id}/data": {
      "post": {
        "tags": [
          "wateranalysisreports (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `WaterAnalysisTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_wateranalysisreports__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--WaterAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Wateranalysisreports  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/wateranalysisreports/{record_id}/source": {
      "get": {
        "tags": [
          "wateranalysisreports (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_wateranalysisreports__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--WaterAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/wateranalysisreports/{record_id}": {
      "get": {
        "tags": [
          "wateranalysisreports (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `WaterAnalysisTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_wateranalysisreports__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--WaterAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Wateranalysisreports  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "wateranalysisreports (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `WaterAnalysisTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_wateranalysisreports__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--WaterAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/wateranalysisreports/{record_id}/versions": {
      "get": {
        "tags": [
          "wateranalysisreports (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `WaterAnalysisTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_wateranalysisreports__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--WaterAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Wateranalysisreports  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/wateranalysisreports/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "wateranalysisreports (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `WaterAnalysisTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_wateranalysisreports__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--WaterAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Wateranalysisreports  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/wateranalysisreports": {
      "post": {
        "tags": [
          "wateranalysisreports (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `WaterAnalysisTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_wateranalysisreports_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/stocktankoilanalysisreports/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "stocktankoilanalysisreports (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `StockTankOilAnalysisTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_stocktankoilanalysisreports__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--StockTankOilAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:stoanalysis[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/stocktankoilanalysisreports/{record_id}/data": {
      "post": {
        "tags": [
          "stocktankoilanalysisreports (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `StockTankOilAnalysisTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_stocktankoilanalysisreports__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--StockTankOilAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Stocktankoilanalysisreports  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/stocktankoilanalysisreports/{record_id}/source": {
      "get": {
        "tags": [
          "stocktankoilanalysisreports (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_stocktankoilanalysisreports__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--StockTankOilAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/stocktankoilanalysisreports/{record_id}": {
      "get": {
        "tags": [
          "stocktankoilanalysisreports (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `StockTankOilAnalysisTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_stocktankoilanalysisreports__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--StockTankOilAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Stocktankoilanalysisreports  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "stocktankoilanalysisreports (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `StockTankOilAnalysisTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_stocktankoilanalysisreports__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--StockTankOilAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/stocktankoilanalysisreports/{record_id}/versions": {
      "get": {
        "tags": [
          "stocktankoilanalysisreports (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `StockTankOilAnalysisTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_stocktankoilanalysisreports__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--StockTankOilAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Stocktankoilanalysisreports  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/stocktankoilanalysisreports/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "stocktankoilanalysisreports (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `StockTankOilAnalysisTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_stocktankoilanalysisreports__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--StockTankOilAnalysisTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Stocktankoilanalysisreports  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/stocktankoilanalysisreports": {
      "post": {
        "tags": [
          "stocktankoilanalysisreports (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `StockTankOilAnalysisTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_stocktankoilanalysisreports_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/interfacialtensiontests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "interfacialtensiontests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `InterfacialTensionTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_interfacialtensiontests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--InterfacialTensionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:interfacialtension[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/interfacialtensiontests/{record_id}/data": {
      "post": {
        "tags": [
          "interfacialtensiontests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `InterfacialTensionTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_interfacialtensiontests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--InterfacialTensionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Interfacialtensiontests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/interfacialtensiontests/{record_id}/source": {
      "get": {
        "tags": [
          "interfacialtensiontests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_interfacialtensiontests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--InterfacialTensionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/interfacialtensiontests/{record_id}": {
      "get": {
        "tags": [
          "interfacialtensiontests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `InterfacialTensionTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_interfacialtensiontests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--InterfacialTensionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Interfacialtensiontests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "interfacialtensiontests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `InterfacialTensionTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_interfacialtensiontests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--InterfacialTensionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/interfacialtensiontests/{record_id}/versions": {
      "get": {
        "tags": [
          "interfacialtensiontests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `InterfacialTensionTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_interfacialtensiontests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--InterfacialTensionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Interfacialtensiontests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/interfacialtensiontests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "interfacialtensiontests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `InterfacialTensionTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_interfacialtensiontests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--InterfacialTensionTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Interfacialtensiontests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/interfacialtensiontests": {
      "post": {
        "tags": [
          "interfacialtensiontests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `InterfacialTensionTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_interfacialtensiontests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/vaporliquidequilibriumtests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "vaporliquidequilibriumtests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `VaporLiquidEquilibriumTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_vaporliquidequilibriumtests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--VaporLiquidEquilibriumTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:vaporliquidequilibriumtest[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/vaporliquidequilibriumtests/{record_id}/data": {
      "post": {
        "tags": [
          "vaporliquidequilibriumtests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `VaporLiquidEquilibriumTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_vaporliquidequilibriumtests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--VaporLiquidEquilibriumTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Vaporliquidequilibriumtests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/vaporliquidequilibriumtests/{record_id}/source": {
      "get": {
        "tags": [
          "vaporliquidequilibriumtests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_vaporliquidequilibriumtests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--VaporLiquidEquilibriumTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/vaporliquidequilibriumtests/{record_id}": {
      "get": {
        "tags": [
          "vaporliquidequilibriumtests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `VaporLiquidEquilibriumTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_vaporliquidequilibriumtests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--VaporLiquidEquilibriumTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Vaporliquidequilibriumtests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "vaporliquidequilibriumtests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `VaporLiquidEquilibriumTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_vaporliquidequilibriumtests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--VaporLiquidEquilibriumTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/vaporliquidequilibriumtests/{record_id}/versions": {
      "get": {
        "tags": [
          "vaporliquidequilibriumtests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `VaporLiquidEquilibriumTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_vaporliquidequilibriumtests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--VaporLiquidEquilibriumTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Vaporliquidequilibriumtests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/vaporliquidequilibriumtests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "vaporliquidequilibriumtests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `VaporLiquidEquilibriumTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_vaporliquidequilibriumtests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--VaporLiquidEquilibriumTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Vaporliquidequilibriumtests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/vaporliquidequilibriumtests": {
      "post": {
        "tags": [
          "vaporliquidequilibriumtests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `VaporLiquidEquilibriumTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_vaporliquidequilibriumtests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multiplecontactmiscibilitytests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "multiplecontactmiscibilitytests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `MultipleContactMiscibilityTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_multiplecontactmiscibilitytests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultipleContactMiscibilityTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:multiple-contact-miscibility[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multiplecontactmiscibilitytests/{record_id}/data": {
      "post": {
        "tags": [
          "multiplecontactmiscibilitytests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `MultipleContactMiscibilityTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_multiplecontactmiscibilitytests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultipleContactMiscibilityTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Multiplecontactmiscibilitytests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multiplecontactmiscibilitytests/{record_id}/source": {
      "get": {
        "tags": [
          "multiplecontactmiscibilitytests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_multiplecontactmiscibilitytests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultipleContactMiscibilityTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multiplecontactmiscibilitytests/{record_id}": {
      "get": {
        "tags": [
          "multiplecontactmiscibilitytests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `MultipleContactMiscibilityTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_multiplecontactmiscibilitytests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultipleContactMiscibilityTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Multiplecontactmiscibilitytests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "multiplecontactmiscibilitytests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `MultipleContactMiscibilityTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_multiplecontactmiscibilitytests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultipleContactMiscibilityTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multiplecontactmiscibilitytests/{record_id}/versions": {
      "get": {
        "tags": [
          "multiplecontactmiscibilitytests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `MultipleContactMiscibilityTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_multiplecontactmiscibilitytests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultipleContactMiscibilityTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Multiplecontactmiscibilitytests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multiplecontactmiscibilitytests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "multiplecontactmiscibilitytests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `MultipleContactMiscibilityTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_multiplecontactmiscibilitytests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--MultipleContactMiscibilityTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Multiplecontactmiscibilitytests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/multiplecontactmiscibilitytests": {
      "post": {
        "tags": [
          "multiplecontactmiscibilitytests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `MultipleContactMiscibilityTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_multiplecontactmiscibilitytests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/slimtubetests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "slimtubetests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `SlimTubeTest` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_slimtubetests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SlimTubeTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:slimtube-test[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/slimtubetests/{record_id}/data": {
      "post": {
        "tags": [
          "slimtubetests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `SlimTubeTest` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_slimtubetests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SlimTubeTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Slimtubetests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/slimtubetests/{record_id}/source": {
      "get": {
        "tags": [
          "slimtubetests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_slimtubetests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SlimTubeTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/slimtubetests/{record_id}": {
      "get": {
        "tags": [
          "slimtubetests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `SlimTubeTest` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_slimtubetests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SlimTubeTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Slimtubetests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "slimtubetests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `SlimTubeTest` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_slimtubetests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SlimTubeTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/slimtubetests/{record_id}/versions": {
      "get": {
        "tags": [
          "slimtubetests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `SlimTubeTest` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_slimtubetests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SlimTubeTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Slimtubetests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/slimtubetests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "slimtubetests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `SlimTubeTest` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_slimtubetests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SlimTubeTest:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Slimtubetests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/slimtubetests": {
      "post": {
        "tags": [
          "slimtubetests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `SlimTubeTest` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_slimtubetests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/samplesanalysesreport/{record_id}": {
      "get": {
        "tags": [
          "samplesanalysesreport (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `SamplesAnalysesReport` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_samplesanalysesreport__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Samplesanalysesreport  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "samplesanalysesreport (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `SamplesAnalysesReport` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_samplesanalysesreport__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/samplesanalysesreport/{record_id}/versions": {
      "get": {
        "tags": [
          "samplesanalysesreport (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `SamplesAnalysesReport` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_samplesanalysesreport__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Samplesanalysesreport  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/samplesanalysesreport/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "samplesanalysesreport (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `SamplesAnalysesReport` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_samplesanalysesreport__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Samplesanalysesreport  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/samplesanalysesreport": {
      "post": {
        "tags": [
          "samplesanalysesreport (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `SamplesAnalysesReport` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_samplesanalysesreport_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysesReport:1.0.0",
                  "version": 15620,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "DocumentTypeID": "namespace:reference-data--DocumentType:SampleAnalysisReport:",
                  "NumberOfPages": "45",
                  "SubTitle": "Advanced Core Analysis Study",
                  "DocumentSubject": "SCAL Results Report (Final)",
                  "DatePublished": "10-06-2021",
                  "DateModified": "10-06-2021",
                  "DocumentLanguage": "English",
                  "SampleIDs": [
                    "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                    "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                  ],
                  "ReportSampleIdentifiers": [
                    "45H",
                    "49H"
                  ],
                  "SampleAnalysisTypeIDs": [
                    "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                  ],
                  "SampleAnalysisCategoryTagIDs": [
                    "SCAL",
                    "CapPressure"
                  ],
                  "Remarks": [
                    {
                      "Remark": "Test was successfully conducted",
                      "RemarkID": "1",
                      "RemarkSource": "Lab Manager"
                    }
                  ]
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/samplesanalysesreport/{record_id}/source": {
      "get": {
        "tags": [
          "samplesanalysesreport (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_samplesanalysesreport__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/capillarypressuretests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "capillarypressuretests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `CapPressure` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_capillarypressuretests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:capillary-pressure[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/capillarypressuretests/{record_id}/data": {
      "post": {
        "tags": [
          "capillarypressuretests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `CapPressure` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_capillarypressuretests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Capillarypressuretests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/capillarypressuretests/{record_id}/source": {
      "get": {
        "tags": [
          "capillarypressuretests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_capillarypressuretests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/capillarypressuretests/{record_id}": {
      "get": {
        "tags": [
          "capillarypressuretests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `CapPressure` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_capillarypressuretests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Capillarypressuretests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "capillarypressuretests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `CapPressure` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_capillarypressuretests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/capillarypressuretests/{record_id}/versions": {
      "get": {
        "tags": [
          "capillarypressuretests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `CapPressure` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_capillarypressuretests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Capillarypressuretests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/capillarypressuretests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "capillarypressuretests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `CapPressure` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_capillarypressuretests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Capillarypressuretests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/capillarypressuretests": {
      "post": {
        "tags": [
          "capillarypressuretests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `CapPressure` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_capillarypressuretests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/relativepermeabilitytests/{record_id}": {
      "get": {
        "tags": [
          "relativepermeabilitytests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `RelativePermeability` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_relativepermeabilitytests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Relativepermeabilitytests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "relativepermeabilitytests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `RelativePermeability` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_relativepermeabilitytests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/relativepermeabilitytests/{record_id}/versions": {
      "get": {
        "tags": [
          "relativepermeabilitytests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `RelativePermeability` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_relativepermeabilitytests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Relativepermeabilitytests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/relativepermeabilitytests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "relativepermeabilitytests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `RelativePermeability` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_relativepermeabilitytests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Relativepermeabilitytests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/relativepermeabilitytests": {
      "post": {
        "tags": [
          "relativepermeabilitytests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `RelativePermeability` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_relativepermeabilitytests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/relativepermeabilitytests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "relativepermeabilitytests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `RelativePermeability` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_relativepermeabilitytests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:relative-permeability[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/relativepermeabilitytests/{record_id}/data": {
      "post": {
        "tags": [
          "relativepermeabilitytests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `RelativePermeability` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_relativepermeabilitytests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Relativepermeabilitytests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/relativepermeabilitytests/{record_id}/source": {
      "get": {
        "tags": [
          "relativepermeabilitytests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_relativepermeabilitytests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/fractionationtests/{record_id}": {
      "get": {
        "tags": [
          "fractionationtests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `Fractionation` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_fractionationtests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Fractionationtests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "fractionationtests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `Fractionation` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_fractionationtests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/fractionationtests/{record_id}/versions": {
      "get": {
        "tags": [
          "fractionationtests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `Fractionation` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_fractionationtests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Fractionationtests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/fractionationtests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "fractionationtests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `Fractionation` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_fractionationtests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Fractionationtests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/fractionationtests": {
      "post": {
        "tags": [
          "fractionationtests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `Fractionation` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_fractionationtests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/fractionationtests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "fractionationtests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `Fractionation` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_fractionationtests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:fractionation[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/fractionationtests/{record_id}/data": {
      "post": {
        "tags": [
          "fractionationtests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `Fractionation` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_fractionationtests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Fractionationtests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/fractionationtests/{record_id}/source": {
      "get": {
        "tags": [
          "fractionationtests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_fractionationtests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/extractiontests/{record_id}": {
      "get": {
        "tags": [
          "extractiontests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `Extraction` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_extractiontests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Extractiontests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "extractiontests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `Extraction` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_extractiontests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/extractiontests/{record_id}/versions": {
      "get": {
        "tags": [
          "extractiontests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `Extraction` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_extractiontests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Extractiontests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/extractiontests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "extractiontests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `Extraction` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_extractiontests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Extractiontests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/extractiontests": {
      "post": {
        "tags": [
          "extractiontests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `Extraction` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_extractiontests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/extractiontests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "extractiontests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `Extraction` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_extractiontests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:extraction[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/extractiontests/{record_id}/data": {
      "post": {
        "tags": [
          "extractiontests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `Extraction` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_extractiontests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Extractiontests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/extractiontests/{record_id}/source": {
      "get": {
        "tags": [
          "extractiontests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_extractiontests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/physicalchemistrytests/{record_id}": {
      "get": {
        "tags": [
          "physicalchemistrytests (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `PhysChem` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_physicalchemistrytests__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Physicalchemistrytests  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "physicalchemistrytests (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `PhysChem` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_physicalchemistrytests__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/physicalchemistrytests/{record_id}/versions": {
      "get": {
        "tags": [
          "physicalchemistrytests (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `PhysChem` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_physicalchemistrytests__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Physicalchemistrytests  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/physicalchemistrytests/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "physicalchemistrytests (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `PhysChem` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_physicalchemistrytests__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Physicalchemistrytests  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/physicalchemistrytests": {
      "post": {
        "tags": [
          "physicalchemistrytests (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `PhysChem` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_physicalchemistrytests_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/physicalchemistrytests/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "physicalchemistrytests (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `PhysChem` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_physicalchemistrytests__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:physical-chemistry[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/physicalchemistrytests/{record_id}/data": {
      "post": {
        "tags": [
          "physicalchemistrytests (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `PhysChem` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_physicalchemistrytests__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Physicalchemistrytests  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/physicalchemistrytests/{record_id}/source": {
      "get": {
        "tags": [
          "physicalchemistrytests (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_physicalchemistrytests__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/electricalproperties/{record_id}": {
      "get": {
        "tags": [
          "electricalproperties (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `ElectricalProperties` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_electricalproperties__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Electricalproperties  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "electricalproperties (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `ElectricalProperties` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_electricalproperties__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/electricalproperties/{record_id}/versions": {
      "get": {
        "tags": [
          "electricalproperties (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `ElectricalProperties` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_electricalproperties__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Electricalproperties  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/electricalproperties/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "electricalproperties (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `ElectricalProperties` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_electricalproperties__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Electricalproperties  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/electricalproperties": {
      "post": {
        "tags": [
          "electricalproperties (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `ElectricalProperties` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_electricalproperties_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/electricalproperties/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "electricalproperties (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `ElectricalProperties` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_electricalproperties__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:electricalproperties[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/electricalproperties/{record_id}/data": {
      "post": {
        "tags": [
          "electricalproperties (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `ElectricalProperties` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_electricalproperties__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Electricalproperties  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/electricalproperties/{record_id}/source": {
      "get": {
        "tags": [
          "electricalproperties (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_electricalproperties__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rockcompressibilities/{record_id}": {
      "get": {
        "tags": [
          "rockcompressibilities (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `RockCompressibility` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_rockcompressibilities__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Rockcompressibilities  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "rockcompressibilities (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `RockCompressibility` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_rockcompressibilities__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rockcompressibilities/{record_id}/versions": {
      "get": {
        "tags": [
          "rockcompressibilities (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `RockCompressibility` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_rockcompressibilities__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Rockcompressibilities  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rockcompressibilities/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "rockcompressibilities (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `RockCompressibility` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_rockcompressibilities__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Rockcompressibilities  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rockcompressibilities": {
      "post": {
        "tags": [
          "rockcompressibilities (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `RockCompressibility` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_rockcompressibilities_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rockcompressibilities/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "rockcompressibilities (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `RockCompressibility` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_rockcompressibilities__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:rock-compressibility[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rockcompressibilities/{record_id}/data": {
      "post": {
        "tags": [
          "rockcompressibilities (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `RockCompressibility` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_rockcompressibilities__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Rockcompressibilities  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/rockcompressibilities/{record_id}/source": {
      "get": {
        "tags": [
          "rockcompressibilities (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_rockcompressibilities__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/watergasrelativepermeabilities/{record_id}": {
      "get": {
        "tags": [
          "watergasrelativepermeabilities (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `WaterGasRelativePermeability` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_watergasrelativepermeabilities__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Watergasrelativepermeabilities  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "watergasrelativepermeabilities (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `WaterGasRelativePermeability` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_watergasrelativepermeabilities__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/watergasrelativepermeabilities/{record_id}/versions": {
      "get": {
        "tags": [
          "watergasrelativepermeabilities (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `WaterGasRelativePermeability` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_watergasrelativepermeabilities__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Watergasrelativepermeabilities  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/watergasrelativepermeabilities/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "watergasrelativepermeabilities (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `WaterGasRelativePermeability` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_watergasrelativepermeabilities__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Watergasrelativepermeabilities  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/watergasrelativepermeabilities": {
      "post": {
        "tags": [
          "watergasrelativepermeabilities (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `WaterGasRelativePermeability` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_watergasrelativepermeabilities_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/watergasrelativepermeabilities/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "watergasrelativepermeabilities (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `WaterGasRelativePermeability` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_watergasrelativepermeabilities__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:water-gas-relative-permeability[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/watergasrelativepermeabilities/{record_id}/data": {
      "post": {
        "tags": [
          "watergasrelativepermeabilities (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `WaterGasRelativePermeability` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_watergasrelativepermeabilities__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Watergasrelativepermeabilities  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/watergasrelativepermeabilities/{record_id}/source": {
      "get": {
        "tags": [
          "watergasrelativepermeabilities (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_watergasrelativepermeabilities__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/formationresistivityindexes/{record_id}": {
      "get": {
        "tags": [
          "formationresistivityindexes (deprecated)"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `FormationResistivityIndex` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v1_formationresistivityindexes__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V1 Formationresistivityindexes  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "formationresistivityindexes (deprecated)"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `FormationResistivityIndex` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v1_formationresistivityindexes__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/formationresistivityindexes/{record_id}/versions": {
      "get": {
        "tags": [
          "formationresistivityindexes (deprecated)"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `FormationResistivityIndex` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v1_formationresistivityindexes__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V1 Formationresistivityindexes  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/formationresistivityindexes/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "formationresistivityindexes (deprecated)"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `FormationResistivityIndex` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v1_formationresistivityindexes__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V1 Formationresistivityindexes  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/formationresistivityindexes": {
      "post": {
        "tags": [
          "formationresistivityindexes (deprecated)"
        ],
        "summary": "Post Records",
        "description": "Create or update `FormationResistivityIndex` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v1_formationresistivityindexes_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:c69cf08a-ae35-5984-b855-f9b36ce1ea21",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "version": 1562066009929332,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "meta": [
                    
                  ],
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                    ],
                    "ReportSampleIdentifiers": [
                      "45H",
                      "49H"
                    ],
                    "AnalysisDate": "08-02-2013",
                    "DepthShiftsID": "opendes:work-product-component--WellLog:Test:",
                    "LaboratoryIDs": [
                      "TBD Lab 1",
                      "TBD Lab 2"
                    ],
                    "LaboratoryNames": [
                      "Corelab",
                      "Weatherford Labs"
                    ],
                    "Remarks": [
                      "Temperature 68F",
                      "Second Remark",
                      "Third Remark"
                    ],
                    "DatePublished": "08-02-2016",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysisReportID": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                        "ParentSamplesAnalysisPageNumbers": "12,14,15-20"
                      }
                    ],
                    "SamplesAnalysisTypeIDs": [
                      "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "CapPressure",
                      "CapillaryPressure",
                      "SCAL"
                    ],
                    "AvailableSampleAnalysisProperties": [
                      "Depth",
                      "Permeability",
                      "Porosity",
                      "InitialSaturation",
                      "Remark",
                      "WaterSaturation"
                    ]
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/formationresistivityindexes/{record_id}/data/{dataset_id}": {
      "get": {
        "tags": [
          "formationresistivityindexes (deprecated)"
        ],
        "summary": "Get Data",
        "description": "Get the (`latest version`) bulk data for a given `FormationResistivityIndex` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_api_rafs_ddms_v1_formationresistivityindexes__record_id__data__dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:formationresistivityindex[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/formationresistivityindexes/{record_id}/data": {
      "post": {
        "tags": [
          "formationresistivityindexes (deprecated)"
        ],
        "summary": "Post Data",
        "description": "Upload the bulk data for a given `FormationResistivityIndex` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_api_rafs_ddms_v1_formationresistivityindexes__record_id__data_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data Api Rafs Ddms V1 Formationresistivityindexes  Record Id  Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v1/formationresistivityindexes/{record_id}/source": {
      "get": {
        "tags": [
          "formationresistivityindexes (deprecated)"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v1_formationresistivityindexes__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysesreport/{record_id}": {
      "get": {
        "tags": [
          "samplesanalysesreport"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `SamplesAnalysesReport` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v2_samplesanalysesreport__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V2 Samplesanalysesreport  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "samplesanalysesreport"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `SamplesAnalysesReport` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v2_samplesanalysesreport__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysesreport/{record_id}/versions": {
      "get": {
        "tags": [
          "samplesanalysesreport"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `SamplesAnalysesReport` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v2_samplesanalysesreport__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V2 Samplesanalysesreport  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysesreport/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "samplesanalysesreport"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `SamplesAnalysesReport` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v2_samplesanalysesreport__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V2 Samplesanalysesreport  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysesreport": {
      "post": {
        "tags": [
          "samplesanalysesreport"
        ],
        "summary": "Post Records",
        "description": "Create or update `SamplesAnalysesReport` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v2_samplesanalysesreport_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysesReport:dd76cf6c-226f-5636-ad1b-1ca0f8249cc8",
                  "kind": "schema_authority:wks:work-product-component--SamplesAnalysesReport:1.0.0",
                  "version": 15620,
                  "acl": {
                    "owners": [
                      "someone@company.com"
                    ],
                    "viewers": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "createTime": "2020-12-16T11:46:20.163Z",
                  "createUser": "some-user@some-company-cloud.com",
                  "modifyTime": "2020-12-16T11:52:24.477Z",
                  "modifyUser": "some-user@some-company-cloud.com",
                  "DocumentTypeID": "namespace:reference-data--DocumentType:SampleAnalysisReport:",
                  "NumberOfPages": "45",
                  "SubTitle": "Advanced Core Analysis Study",
                  "DocumentSubject": "SCAL Results Report (Final)",
                  "DatePublished": "10-06-2021",
                  "DateModified": "10-06-2021",
                  "DocumentLanguage": "English",
                  "SampleIDs": [
                    "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc10",
                    "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11"
                  ],
                  "ReportSampleIdentifiers": [
                    "45H",
                    "49H"
                  ],
                  "SampleAnalysisTypeIDs": [
                    "CapillaryPressureGasOil.CentrifugeDrainageGasOil"
                  ],
                  "SampleAnalysisCategoryTagIDs": [
                    "SCAL",
                    "CapPressure"
                  ],
                  "Remarks": [
                    {
                      "Remark": "Test was successfully conducted",
                      "RemarkID": "1",
                      "RemarkSource": "Lab Manager"
                    }
                  ]
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysesreport/{record_id}/source": {
      "get": {
        "tags": [
          "samplesanalysesreport"
        ],
        "summary": "Get Source Data",
        "description": "Get source data from data.Datasets property.\n\n:param record_id: record id\n:type record_id: str\n:param storage_service: storage service, defaults to\n    Depends(get_async_storage_service)\n:type storage_service: dataset.DatasetService, optional\n:param dataset_service: dataset service, defaults to\n    Depends(get_async_dataset_service)\n:type dataset_service: storage.StorageService, optional\n:param version: version, defaults to None\n:type version: Optional[str], optional\n:return: rendered source data response\n:rtype: JSONResponse",
        "operationId": "get_source_data_api_rafs_ddms_v2_samplesanalysesreport__record_id__source_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version"
            },
            "name": "version",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/analysistypes": {
      "get": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Get Types",
        "description": "Get available types.",
        "operationId": "get_types_api_rafs_ddms_v2_samplesanalysis_analysistypes_get",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      
                    },
                    "type": "array"
                  },
                  "type": "object",
                  "title": "Response Get Types Api Rafs Ddms V2 Samplesanalysis Analysistypes Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/{record_id}": {
      "get": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `SamplesAnalysis` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v2_samplesanalysis__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V2 Samplesanalysis  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `SamplesAnalysis` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v2_samplesanalysis__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/{record_id}/versions": {
      "get": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `SamplesAnalysis` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v2_samplesanalysis__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V2 Samplesanalysis  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `SamplesAnalysis` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v2_samplesanalysis__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V2 Samplesanalysis  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis": {
      "post": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Post Records",
        "description": "Create or update `SamplesAnalysis` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v2_samplesanalysis_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SamplesAnalysisRecords",
                "description": "SamplesAnalysis records payload",
                "type": "array",
                "items": {
                  "title": "SamplesAnalysis",
                  "type": "object",
                  "properties": {
                    "ancestry": {
                      "title": "Ancestry",
                      "description": "The links to data, which constitute the inputs, from which this record instance is derived.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractLegalParentList_1__field_0__Field0"
                        }
                      ]
                    },
                    "data": {
                      "$ref": "#/definitions/Data"
                    },
                    "kind": {
                      "title": "Entity Kind",
                      "description": "The schema identification for the OSDU resource object following the pattern {Namespace}:{Source}:{Type}:{VersionMajor}.{VersionMinor}.{VersionPatch}. The versioning scheme follows the semantic versioning, https://semver.org/.",
                      "example": "osdu:wks:work-product-component--SamplesAnalysis:1.0.0",
                      "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.]+:[0-9]+.[0-9]+.[0-9]+$",
                      "type": "string"
                    },
                    "acl": {
                      "title": "Access Control List",
                      "description": "The access control tags associated with this entity.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAccessControlList_1__field_0__Field0"
                        }
                      ]
                    },
                    "version": {
                      "title": "Version Number",
                      "description": "The version number of this OSDU resource; set by the framework.",
                      "example": 1562066009929332,
                      "type": "integer"
                    },
                    "tags": {
                      "title": "Tag Dictionary",
                      "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
                      "example": {
                        "NameOfKey": "String value"
                      },
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "modifyUser": {
                      "title": "Resource Object Version Creation User Reference",
                      "description": "The user reference, which created this version of this resource object. Set by the System.",
                      "example": "some-user@some-company-cloud.com",
                      "type": "string"
                    },
                    "modifyTime": {
                      "title": "Resource Object Version Creation DateTime",
                      "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
                      "example": "2020-12-16T11:52:24.477Z",
                      "type": "string",
                      "format": "date-time"
                    },
                    "createTime": {
                      "title": "Resource Object Creation DateTime",
                      "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
                      "example": "2020-12-16T11:46:20.163Z",
                      "type": "string",
                      "format": "date-time"
                    },
                    "meta": {
                      "title": "Frame of Reference Meta Data",
                      "description": "The Frame of Reference meta data section linking the named properties to self-contained definitions.",
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractMetaItem_1__field_0__Field0"
                      }
                    },
                    "legal": {
                      "title": "Legal Tags",
                      "description": "The entity's legal tags and compliance status. The actual contents associated with the legal tags is managed by the Compliance Service.",
                      "allOf": [
                        {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractLegalTags_1__field_0__Field0"
                        }
                      ]
                    },
                    "createUser": {
                      "title": "Resource Object Creation User Reference",
                      "description": "The user reference, which created the first version of this resource object. Set by the System.",
                      "example": "some-user@some-company-cloud.com",
                      "type": "string"
                    },
                    "id": {
                      "title": "Entity ID",
                      "description": "Previously called ResourceID or SRN which identifies this OSDU resource object without version.",
                      "example": "namespace:work-product-component--SamplesAnalysis:2422fda8-18b4-554e-aafa-4df5f46e3d7a",
                      "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "acl",
                    "legal"
                  ],
                  "additionalProperties": false,
                  "definitions": {
                    "app__models__domain__osdu__osdu_wks_AbstractLegalParentList_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "parents": {
                          "title": "Parents",
                          "description": "An array of none, one or many entity references of 'direct parents' in the data platform, which mark the current record as a derivative. In contrast to other relationships, the source record version is required. During record creation or update the ancestry.parents[] relationships are used to collect the legal tags from the sources and aggregate them in the legal.legaltags[] array. As a consequence, should e.g., one or more of the legal tags of the source data expire, the access to the derivatives is also terminated. For details, see ComplianceService tutorial, 'Creating derivative Records'.",
                          "example": [
                            
                          ],
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]+$"
                          }
                        }
                      },
                      "additionalProperties": false
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractActivityState_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "EffectiveDateTime": {
                          "title": "Effective Date Time",
                          "description": "The date and time at which the activity status becomes effective.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "TerminationDateTime": {
                          "title": "Termination Date Time",
                          "description": "The date and time at which the activity status is no longer in effect. For still effective activity states, the TerminationDateTime is left absent. For zero-duration intervals (events), the TerminationDateTime set to the same value as EffectiveDateTime.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "ActivityStatusID": {
                          "title": "Activity Status ID",
                          "description": "The ActivityStatus is a set of major activity phases that are significant to business stakeholders.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ActivityStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "Remark": {
                          "title": "Remark",
                          "description": "An optional remark associated with the ActivityStatus and time interval.",
                          "type": "string"
                        }
                      }
                    },
                    "SoftwareSpecification": {
                      "title": "SoftwareSpecification",
                      "type": "object",
                      "properties": {
                        "Version": {
                          "title": "Software Version",
                          "description": "The version of the software, application or plug-in used while performing this activity.",
                          "type": "string"
                        },
                        "SoftwareName": {
                          "title": "Software Name",
                          "description": "The name of the software, application or plug-in used while performing this activity.",
                          "type": "string"
                        }
                      }
                    },
                    "Key": {
                      "title": "Key",
                      "type": "object",
                      "properties": {
                        "TimeIndexParameterKey": {
                          "title": "Time Index Parameter Key",
                          "description": "The time index acting as parameter key value.",
                          "type": "string",
                          "format": "time"
                        },
                        "IntegerParameterKey": {
                          "title": "Integer Parameter Key",
                          "description": "Integer value from \"ParameterKey\" parameter, associated with this parameter. Example: {\"ParameterKey\": \"index\", \"StringParameterKey: 2}.",
                          "type": "integer"
                        },
                        "StringParameterKey": {
                          "title": "String Parameter Key",
                          "description": "String value from \"ParameterKey\" parameter, associated with this parameter. Can be used to associate with parameter values of type string or data quantity. In the later case, the string representation of the quantity value will be used. Example: {\"ParameterKey\": \"facies\", \"StringParameterKey: \"shale\"}, {\"ParameterKey\":\"depth\", \"StringParameterKey\":\"1545.43m\"}.",
                          "type": "string"
                        },
                        "ObjectParameterKey": {
                          "title": "Object Parameter Key",
                          "description": "Relationship to an object ID, which acts as the parameter.",
                          "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "ParameterKey": {
                          "title": "Internal Parameter Key",
                          "description": "The key name, which establishes an association between parameters.",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractActivityParameter_1__field_1__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "StringParameter": {
                          "title": "String Parameter",
                          "description": "Parameter containing a string value.",
                          "type": "string"
                        },
                        "ParameterRoleID": {
                          "title": "Parameter Role",
                          "description": "Reference data describing how the parameter was used by the activity, such as input, output, control, constraint, agent, predecessor activity, successor activity.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ParameterRole:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "DataObjectParameter": {
                          "title": "Data Object Parameter",
                          "description": "Parameter referencing to a top level object.",
                          "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "Selection": {
                          "title": "Selection",
                          "description": "Textual description about how this parameter was selected.",
                          "type": "string"
                        },
                        "Title": {
                          "title": "Title",
                          "description": "Name of the parameter, used to identify it in the activity. It must have an equivalent in the ActivityTemplate parameters.",
                          "type": "string"
                        },
                        "Index": {
                          "title": "Index",
                          "description": "When parameter is an array, used to indicate the index in the array.",
                          "type": "integer"
                        },
                        "ParameterKindID": {
                          "title": "Parameterkindid",
                          "description": "[Added to cover lack of inheritance]",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ParameterKind:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "DataQuantityParameterUOMID": {
                          "title": "Data Quantity Parameter UoM ID",
                          "description": "Identifies unit of measure for floating point value.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-UnitOfMeasure:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "BooleanParameter": {
                          "title": "Boolean Parameter",
                          "description": "The boolean parameter value, if ParameterKindID refers to the Boolean type.",
                          "type": "boolean"
                        },
                        "Keys": {
                          "title": "Keys",
                          "description": "A nested array describing keys used to identify a parameter value. When multiple values are provided for a given parameter, the key provides a way to identify the parameter through its association with an object, a time index or a parameter array member via ParameterKey value.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/Key"
                          }
                        },
                        "DataQuantityParameter": {
                          "title": "Data Quantity Parameter",
                          "description": "Parameter containing a double value.",
                          "type": "number"
                        },
                        "TimeIndexParameter": {
                          "title": "Time Index Parameter",
                          "description": "Parameter containing a time index value.  It is assumed that all TimeIndexParameters within an Activity have the same date-time format, which is then described by the FrameOfReference mechanism.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "IntegerQuantityParameter": {
                          "title": "Integer Quantity Parameter",
                          "description": "Parameter containing an integer value.",
                          "type": "integer"
                        }
                      },
                      "required": [
                        "Title",
                        "ParameterKindID"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Type": {
                      "title": "Type",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsPoint"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItem": {
                      "title": "GeometryItem",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "minItems": 2,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Type"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate": {
                      "title": "Coordinate",
                      "type": "array",
                      "items": {
                        
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel": {
                      "title": "TypeModel",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsLineString"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel": {
                      "title": "GeometryItemModel",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "minItems": 2,
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate"
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel1": {
                      "title": "TypeModel1",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsPolygon"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel1": {
                      "title": "GeometryItemModel1",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel1"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel2": {
                      "title": "TypeModel2",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsMultiPoint"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel2": {
                      "title": "GeometryItemModel2",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel2"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel3": {
                      "title": "TypeModel3",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsMultiLineString"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel3": {
                      "title": "GeometryItemModel3",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel3"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel4": {
                      "title": "TypeModel4",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsMultiPolygon"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel4": {
                      "title": "GeometryItemModel4",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate"
                              }
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel4"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel5": {
                      "title": "TypeModel5",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsGeometryCollection"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Geometry": {
                      "title": "Geometry",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "minItems": 2,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Type"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel": {
                      "title": "GeometryModel",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "minItems": 2,
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate"
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel1": {
                      "title": "GeometryModel1",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel1"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel2": {
                      "title": "GeometryModel2",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel2"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel3": {
                      "title": "GeometryModel3",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel3"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel4": {
                      "title": "GeometryModel4",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Coordinate"
                              }
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel4"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel5": {
                      "title": "GeometryItemModel5",
                      "type": "object",
                      "properties": {
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel5"
                        },
                        "geometries": {
                          "title": "Geometries",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Geometry"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel1"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel2"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel3"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryModel4"
                              }
                            ]
                          }
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "type",
                        "geometries"
                      ]
                    },
                    "TypeModel12": {
                      "title": "TypeModel12",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsFeature"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Feature": {
                      "title": "Feature",
                      "type": "object",
                      "properties": {
                        "geometry": {
                          "title": "Geometry",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItem"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel1"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel2"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel3"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel4"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__GeometryItemModel5"
                            }
                          ]
                        },
                        "type": {
                          "$ref": "#/definitions/TypeModel12"
                        },
                        "properties": {
                          "title": "Properties",
                          "type": "object"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel13": {
                      "title": "TypeModel13",
                      "description": "An enumeration.",
                      "enum": [
                        "AnyCrsFeatureCollection"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "CoordinateReferenceSystemID": {
                          "title": "Coordinate Reference System ID",
                          "description": "The CRS reference into the CoordinateReferenceSystem catalog.",
                          "example": "namespace:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-CoordinateReferenceSystem:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "VerticalUnitID": {
                          "title": "Vertical Unit ID",
                          "description": "The explicit vertical unit ID, referring to a reference-data--UnitOfMeasure record; this is only required for features containing 3-dimensional coordinates and undefined vertical CoordinateReferenceSystems; if a VerticalCoordinateReferenceSystemID is populated, the VerticalUnitID is given by the VerticalCoordinateReferenceSystemID's data.CoordinateSystem.VerticalAxisUnitID. The VerticalUnitID definition overrides any self-contained definition in persistableReferenceUnitZ.",
                          "example": "namespace:reference-data--UnitOfMeasure:m:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-UnitOfMeasure:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "persistableReferenceCrs": {
                          "title": "CRS Reference",
                          "description": "The CRS reference as persistableReference string. If populated, the CoordinateReferenceSystemID takes precedence.",
                          "example": "{\"authCode\":{\"auth\":\"OSDU\",\"code\":\"32021079\"},\"lateBoundCRS\":{\"authCode\":{\"auth\":\"EPSG\",\"code\":\"32021\"},\"name\":\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\",\"type\":\"LBC\",\"ver\":\"PE_10_9_1\",\"wkt\":\"PROJCS[\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-100.5],PARAMETER[\\\"Standard_Parallel_1\\\",46.18333333333333],PARAMETER[\\\"Standard_Parallel_2\\\",47.48333333333333],PARAMETER[\\\"Latitude_Of_Origin\\\",45.66666666666666],UNIT[\\\"Foot_US\\\",0.3048006096012192],AUTHORITY[\\\"EPSG\\\",32021]]\"},\"name\":\"NAD27 * OGP-Usa Conus / North Dakota CS27 South zone [32021,15851]\",\"singleCT\":{\"authCode\":{\"auth\":\"EPSG\",\"code\":\"15851\"},\"name\":\"NAD_1927_To_WGS_1984_79_CONUS\",\"type\":\"ST\",\"ver\":\"PE_10_9_1\",\"wkt\":\"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],OPERATIONACCURACY[5.0],AUTHORITY[\\\"EPSG\\\",15851]]\"},\"type\":\"EBC\",\"ver\":\"PE_10_9_1\"}",
                          "type": "string"
                        },
                        "features": {
                          "title": "Features",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Feature"
                          }
                        },
                        "persistableReferenceUnitZ": {
                          "title": "Z-Unit Reference",
                          "description": "The unit of measure for the Z-axis (only for 3-dimensional coordinates, where the CRS does not describe the vertical unit). Note that the direction is upwards positive, i.e. Z means height.",
                          "example": "{\"scaleOffset\":{\"scale\":1.0,\"offset\":0.0},\"symbol\":\"m\",\"baseMeasurement\":{\"ancestry\":\"Length\",\"type\":\"UM\"},\"type\":\"USO\"}",
                          "type": "string"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "persistableReferenceVerticalCrs": {
                          "title": "Vertical CRS Reference",
                          "description": "The VerticalCRS reference as persistableReference string. If populated, the VerticalCoordinateReferenceSystemID takes precedence. The property is null or empty for 2D geometries. For 3D geometries and absent or null persistableReferenceVerticalCrs the vertical CRS is either provided via persistableReferenceCrs's CompoundCRS or it is implicitly defined as EPSG:5714 MSL height.",
                          "example": "{\"authCode\":{\"auth\":\"EPSG\",\"code\":\"5714\"},\"name\":\"MSL_Height\",\"type\":\"LBC\",\"ver\":\"PE_10_9_1\",\"wkt\":\"VERTCS[\\\"MSL_Height\\\",VDATUM[\\\"Mean_Sea_Level\\\"],PARAMETER[\\\"Vertical_Shift\\\",0.0],PARAMETER[\\\"Direction\\\",1.0],UNIT[\\\"Meter\\\",1.0],AUTHORITY[\\\"EPSG\\\",5714]]\"}",
                          "type": "string"
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__TypeModel13"
                        },
                        "VerticalCoordinateReferenceSystemID": {
                          "title": "Vertical Coordinate Reference System ID",
                          "description": "The explicit VerticalCRS reference into the CoordinateReferenceSystem catalog. This property stays empty for 2D geometries. Absent or empty values for 3D geometries mean the context may be provided by a CompoundCRS in 'CoordinateReferenceSystemID' or implicitly EPSG:5714 MSL height",
                          "example": "namespace:reference-data--CoordinateReferenceSystem:Vertical:EPSG::5714:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-CoordinateReferenceSystem:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      },
                      "required": [
                        "persistableReferenceCrs",
                        "features",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Type": {
                      "title": "Type",
                      "description": "An enumeration.",
                      "enum": [
                        "FeatureCollection"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel": {
                      "title": "TypeModel",
                      "description": "An enumeration.",
                      "enum": [
                        "Point"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItem": {
                      "title": "GeometryItem",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "minItems": 2,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate": {
                      "title": "Coordinate",
                      "type": "array",
                      "items": {
                        
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel1": {
                      "title": "TypeModel1",
                      "description": "An enumeration.",
                      "enum": [
                        "LineString"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel": {
                      "title": "GeometryItemModel",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "minItems": 2,
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate"
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel1"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel2": {
                      "title": "TypeModel2",
                      "description": "An enumeration.",
                      "enum": [
                        "Polygon"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel1": {
                      "title": "GeometryItemModel1",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel2"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel3": {
                      "title": "TypeModel3",
                      "description": "An enumeration.",
                      "enum": [
                        "MultiPoint"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel2": {
                      "title": "GeometryItemModel2",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel3"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel4": {
                      "title": "TypeModel4",
                      "description": "An enumeration.",
                      "enum": [
                        "MultiLineString"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel3": {
                      "title": "GeometryItemModel3",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel4"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel5": {
                      "title": "TypeModel5",
                      "description": "An enumeration.",
                      "enum": [
                        "MultiPolygon"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel4": {
                      "title": "GeometryItemModel4",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate"
                              }
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel5"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "TypeModel6": {
                      "title": "TypeModel6",
                      "description": "An enumeration.",
                      "enum": [
                        "GeometryCollection"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Geometry": {
                      "title": "Geometry",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "minItems": 2,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel": {
                      "title": "GeometryModel",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "minItems": 2,
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate"
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel1"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel1": {
                      "title": "GeometryModel1",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel2"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel2": {
                      "title": "GeometryModel2",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel3"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel3": {
                      "title": "GeometryModel3",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate"
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel4"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel4": {
                      "title": "GeometryModel4",
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "title": "Coordinates",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Coordinate"
                              }
                            }
                          }
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel5"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "coordinates",
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel5": {
                      "title": "GeometryItemModel5",
                      "type": "object",
                      "properties": {
                        "type": {
                          "$ref": "#/definitions/TypeModel6"
                        },
                        "geometries": {
                          "title": "Geometries",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Geometry"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel1"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel2"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel3"
                              },
                              {
                                "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryModel4"
                              }
                            ]
                          }
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "type",
                        "geometries"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel13": {
                      "title": "TypeModel13",
                      "description": "An enumeration.",
                      "enum": [
                        "Feature"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Feature": {
                      "title": "Feature",
                      "type": "object",
                      "properties": {
                        "geometry": {
                          "title": "Geometry",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItem"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel1"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel2"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel3"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel4"
                            },
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__GeometryItemModel5"
                            }
                          ]
                        },
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__TypeModel13"
                        },
                        "properties": {
                          "title": "Properties",
                          "type": "object"
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "type": {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Type"
                        },
                        "features": {
                          "title": "Features",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Feature"
                          }
                        },
                        "bbox": {
                          "title": "Bbox",
                          "minItems": 4,
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      },
                      "required": [
                        "type",
                        "features"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractSpatialLocation_1__field_1__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "AsIngestedCoordinates": {
                          "title": "As Ingested Coordinates",
                          "description": "The original or 'as ingested' coordinates (Point, MultiPoint, LineString, MultiLineString, Polygon or MultiPolygon). The name 'AsIngestedCoordinates' was chosen to contrast it to 'OriginalCoordinates', which carries the uncertainty whether any coordinate operations took place before ingestion. In cases where the original CRS is different from the as-ingested CRS, the AppliedOperations can also contain the list of operations applied to the coordinate prior to ingestion. The data structure is similar to GeoJSON FeatureCollection, however in a CRS context explicitly defined within the AbstractAnyCrsFeatureCollection. The coordinate sequence follows GeoJSON standard, i.e. 'eastward/longitude', 'northward/latitude' {, 'upward/height' unless overridden by an explicit direction in the AsIngestedCoordinates.VerticalCoordinateReferenceSystemID}.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAnyCrsFeatureCollection_1__field_1__Field0"
                            }
                          ]
                        },
                        "SpatialParameterTypeID": {
                          "title": "Spatialparametertypeid",
                          "description": "A type of spatial representation of an object, often general (e.g. an Outline, which could be applied to Field, Reservoir, Facility, etc.) or sometimes specific (e.g. Onshore Outline, State Offshore Outline, Federal Offshore Outline, 3 spatial representations that may be used by Countries).",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-SpatialParameterType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "QuantitativeAccuracyBandID": {
                          "title": "Quantitativeaccuracybandid",
                          "description": "An approximate quantitative assessment of the quality of a location (accurate to > 500 m (i.e. not very accurate)), to < 1 m, etc.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-QuantitativeAccuracyBand:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "CoordinateQualityCheckRemarks": {
                          "title": "Coordinatequalitycheckremarks",
                          "description": "Freetext remarks on Quality Check.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "AppliedOperations": {
                          "title": "Operations Applied",
                          "description": "The audit trail of operations applied to the coordinates from the original state to the current state. The list may contain operations applied prior to ingestion as well as the operations applied to produce the Wgs84Coordinates. The text elements refer to ESRI style CRS and Transformation names, which may have to be translated to EPSG standard names.",
                          "example": [
                            "conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted",
                            "transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "QualitativeSpatialAccuracyTypeID": {
                          "title": "Qualitativespatialaccuracytypeid",
                          "description": "A qualitative description of the quality of a spatial location, e.g. unverifiable, not verified, basic validation.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-QualitativeSpatialAccuracyType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "CoordinateQualityCheckPerformedBy": {
                          "title": "Coordinatequalitycheckperformedby",
                          "description": "The user who performed the Quality Check.",
                          "type": "string"
                        },
                        "SpatialLocationCoordinatesDate": {
                          "title": "Spatiallocationcoordinatesdate",
                          "description": "Date when coordinates were measured or retrieved.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "CoordinateQualityCheckDateTime": {
                          "title": "Coordinatequalitycheckdatetime",
                          "description": "The date of the Quality Check.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "Wgs84Coordinates": {
                          "title": "WGS 84 Coordinates",
                          "description": "The normalized coordinates (Point, MultiPoint, LineString, MultiLineString, Polygon or MultiPolygon) based on WGS 84 (EPSG:4326 for 2-dimensional coordinates, EPSG:4326 + EPSG:5714 (MSL) for 3-dimensional coordinates). This derived coordinate representation is intended for global discoverability only. The schema of this substructure is identical to the GeoJSON FeatureCollection https://geojson.org/schema/FeatureCollection.json. The coordinate sequence follows GeoJSON standard, i.e. longitude, latitude {, height}",
                          "allOf": [
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractFeatureCollection_1__field_0__Field0"
                            }
                          ]
                        },
                        "SpatialGeometryTypeID": {
                          "title": "Spatialgeometrytypeid",
                          "description": "Indicates the expected look of the SpatialParameterType, e.g. Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon. The value constrains the type of geometries in the GeoJSON Wgs84Coordinates and AsIngestedCoordinates.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-SpatialGeometryType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractGeoPoliticalContext_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "GeoPoliticalEntityID": {
                          "title": "Geopoliticalentityid",
                          "description": "Reference to GeoPoliticalEntity.",
                          "pattern": "^[\\w\\-\\.]+:master-data\\-\\-GeoPoliticalEntity:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "GeoTypeID": {
                          "title": "Geotypeid",
                          "description": "The GeoPoliticalEntityType reference of the GeoPoliticalEntity (via GeoPoliticalEntityID) for application convenience.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-GeoPoliticalEntityType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractGeoBasinContext_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "BasinID": {
                          "title": "Basinid",
                          "description": "Reference to Basin.",
                          "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Basin:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "GeoTypeID": {
                          "title": "Geotypeid",
                          "description": "The BasinType reference of the Basin (via BasinID) for application convenience.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-BasinType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractGeoFieldContext_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "FieldID": {
                          "title": "Fieldid",
                          "description": "Reference to Field.",
                          "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Field:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "GeoTypeID": {
                          "title": "Geotypeid",
                          "description": "The fixed type 'Field' for this AbstractGeoFieldContext.",
                          "default": "Field",
                          "const": "Field",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractGeoPlayContext_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "PlayID": {
                          "title": "Playid",
                          "description": "Reference to the play.",
                          "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Play:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "GeoTypeID": {
                          "title": "Geotypeid",
                          "description": "The PlayType reference of the Play (via PlayID) for application convenience.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-PlayType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractGeoProspectContext_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "ProspectID": {
                          "title": "Prospectid",
                          "description": "Reference to the prospect.",
                          "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Prospect:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "GeoTypeID": {
                          "title": "Geotypeid",
                          "description": "The ProspectType reference of the Prospect (via ProspectID) for application convenience.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ProspectType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractGeoContext_1__field_0__Field0": {
                      "title": "Field0",
                      "description": "A geographic context to an entity. It can be either a reference to a GeoPoliticalEntity, Basin, Field, Play or Prospect.",
                      "anyOf": [
                        {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractGeoPoliticalContext_1__field_0__Field0"
                        },
                        {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractGeoBasinContext_1__field_0__Field0"
                        },
                        {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractGeoFieldContext_1__field_0__Field0"
                        },
                        {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractGeoPlayContext_1__field_0__Field0"
                        },
                        {
                          "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractGeoProspectContext_1__field_0__Field0"
                        }
                      ]
                    },
                    "LineageAssertion": {
                      "title": "LineageAssertion",
                      "type": "object",
                      "properties": {
                        "ID": {
                          "title": "Id",
                          "description": "The object reference identifying the DIRECT, INDIRECT, REFERENCE dependency.",
                          "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "LineageRelationshipType": {
                          "title": "Lineagerelationshiptype",
                          "description": "Used by LineageAssertion to describe the nature of the line of descent of a work product component from a prior Resource, such as DIRECT, INDIRECT, REFERENCE.  It is not for proximity (number of nodes away), it is not to cover all the relationships in a full ontology or graph, and it is not to describe the type of activity that created the asserting WPC.  LineageAssertion does not encompass a full provenance, process history, or activity model.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-LineageRelationshipType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAliasNames_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "AliasNameTypeID": {
                          "title": "Aliasnametypeid",
                          "description": "A classification of alias names such as by role played or type of source, such as regulatory name, regulatory code, company code, international standard name, etc.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-AliasNameType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "EffectiveDateTime": {
                          "title": "Effectivedatetime",
                          "description": "The date and time when an alias name becomes effective.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "AliasName": {
                          "title": "Aliasname",
                          "description": "Alternative Name value of defined name type for an object.",
                          "type": "string"
                        },
                        "TerminationDateTime": {
                          "title": "Terminationdatetime",
                          "description": "The data and time when an alias name is no longer in effect.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "DefinitionOrganisationID": {
                          "title": "Definitionorganisationid",
                          "description": "The StandardsOrganisation (reference-data) or Organisation (master-data) that provided the name (the source).",
                          "pattern": "^[\\w\\-\\.]+:(reference-data\\-\\-StandardsOrganisation|master-data\\-\\-Organisation):[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractContact_1__field_1__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "RoleTypeID": {
                          "title": "Role Type ID",
                          "description": "The identifier of a reference value for the role of the contact within the associated organisation, such as Account owner, Sales Representative, Technical Support, Project Manager, Party Chief, Client Representative, Senior Observer.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ContactRoleType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "Comment": {
                          "title": "Comment",
                          "description": "Additional information about the contact",
                          "type": "string"
                        },
                        "WorkflowPersonaTypeID": {
                          "title": "WorkflowPersonaTypeID",
                          "description": "The persona in context of workflows associated with this contact, as used in TechnicalAssurance.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowPersonaType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "DataGovernanceRoleTypeID": {
                          "title": "DataGovernanceRoleTypeID",
                          "description": "The data governance role assigned to this contact if and only if the context has a data governance role (in context of TechnicalAssurance). The value is kept absent in all other cases.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-DataGovernanceRoleType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "OrganisationID": {
                          "title": "Organisation ID",
                          "description": "Reference to the company the contact is associated with.",
                          "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "PhoneNumber": {
                          "title": "Phone Number",
                          "description": "Contact phone number. Property may be left empty where it is inappropriate to provide personally identifiable information.",
                          "example": "1-555-281-5555",
                          "type": "string"
                        },
                        "EmailAddress": {
                          "title": "Email Address",
                          "description": "Contact email address. Property may be left empty where it is inappropriate to provide personally identifiable information.",
                          "example": "support@company.com",
                          "type": "string"
                        },
                        "Name": {
                          "title": "Name",
                          "description": "Name of the individual contact. Property may be left empty where it is inappropriate to provide personally identifiable information.",
                          "type": "string"
                        }
                      }
                    },
                    "UnacceptableUsageItem": {
                      "title": "UnacceptableUsageItem",
                      "type": "object",
                      "properties": {
                        "WorkflowUsage": {
                          "title": "Workflow Usage",
                          "description": "DEPRECATED: superseded by WorkflowUsageTypeID. Name of the business activities, processes, and/or workflows that the record is technical assurance value is not valid for.",
                          "example": "namespace:reference-data--WorkflowUsageType:SeismicInterpretation:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowUsageType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "WorkflowPersonaTypeID": {
                          "title": "Workflow Persona Type ID",
                          "description": "Name of the role or personas that the record is technical assurance value is not valid for.",
                          "example": "namespace:reference-data--WorkflowPersonaType:SeismicProcessor:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowPersonaType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "WorkflowPersona": {
                          "title": "Workflow Persona",
                          "description": "DEPRECATED: superseded by WorkflowPersonaTypeID. Name of the role or personas that the record is technical assurance value is not valid for.",
                          "example": "namespace:reference-data--WorkflowPersonaType:SeismicInterpreter:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowPersonaType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "WorkflowUsageTypeID": {
                          "title": "Workflow Usage Type ID",
                          "description": "Name of the business activities, processes, and/or workflows that the record's technical assurance value is not valid for.",
                          "example": "namespace:reference-data--WorkflowUsageType:SeismicProcessing:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowUsageType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "QualityDataRuleSetID": {
                          "title": "Quality Data Rule Set ID",
                          "description": "DEPRECATED: superseded by DataQualityRuleSetID referring to DataQualityRuleSet. The QualityDataRuleSet, which did not pass successfully to achieve this level of technical assurance.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-QualityDataRuleSet:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "DataQualityID": {
                          "title": "data Quality ID",
                          "description": "The relationship to a work-product-component--DataQuality assessment record, which was used as the basis for this decision.",
                          "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-DataQuality:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "ValueChainStatusTypeID": {
                          "title": "Value Chain Status Type ID",
                          "description": "The stage of business where the record is not acceptable for workflow usage.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ValueChainStatusType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "DataQualityRuleSetID": {
                          "title": "Data Quality Rule Set ID",
                          "description": "The DataQualityRuleSet, which did not pass successfully to achieve this level of technical assurance.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-DataQualityRuleSet:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "AcceptableUsageItem": {
                      "title": "AcceptableUsageItem",
                      "type": "object",
                      "properties": {
                        "WorkflowUsage": {
                          "title": "Workflow Usage",
                          "description": "DEPRECATED: superseded by WorkflowUsageTypeID. Name of the business activities, processes, and/or workflows that the record is technical assurance value is valid for.",
                          "example": "namespace:reference-data--WorkflowUsageType:SeismicProcessing:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowUsageType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "WorkflowPersonaTypeID": {
                          "title": "Workflow Persona Type ID",
                          "description": "Name of the role or personas that the record's technical assurance value is valid for.",
                          "example": "namespace:reference-data--WorkflowPersonaType:SeismicProcessor:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowPersonaType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "WorkflowPersona": {
                          "title": "Workflow Persona",
                          "description": "DEPRECATED: superseded by WorkflowPersonaTypeID. Name of the role or personas that the record is technical assurance value is valid for.",
                          "example": "namespace:reference-data--WorkflowPersonaType:SeismicProcessor:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowPersonaType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "WorkflowUsageTypeID": {
                          "title": "Workflow Usage Type ID",
                          "description": "Name of the business activities, processes, and/or workflows that the record's technical assurance value is valid for.",
                          "example": "namespace:reference-data--WorkflowUsageType:SeismicProcessing:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WorkflowUsageType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "QualityDataRuleSetID": {
                          "title": "Quality Data Rule Set ID",
                          "description": "DEPRECATED: superseded by DataQualityRuleSetID referring to DataQualityRuleSet. The QualityDataRuleSet, which had to pass successfully to achieve this level of technical assurance.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-QualityDataRuleSet:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "DataQualityID": {
                          "title": "data Quality ID",
                          "description": "The relationship to a work-product-component--DataQuality assessment record, which was used as the basis for this decision.",
                          "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-DataQuality:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "ValueChainStatusTypeID": {
                          "title": "Value Chain Status Type ID",
                          "description": "The stage of business where the record is acceptable for workflow usage.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ValueChainStatusType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "DataQualityRuleSetID": {
                          "title": "Data Quality Rule Set ID",
                          "description": "The DataQualityRuleSet, which had to pass successfully to achieve this level of technical assurance.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-DataQualityRuleSet:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractTechnicalAssurance_1__field_2__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "Comment": {
                          "title": "Comment",
                          "description": "Any additional context to support the determination of technical assurance",
                          "example": "This is free form text from reviewer, e.g. restrictions on use",
                          "type": "string"
                        },
                        "Reviewers": {
                          "title": "Reviewers",
                          "description": "The individuals, or roles, that reviewed and determined the technical assurance value",
                          "example": [
                            {
                              "RoleTypeID": "namespace:reference-data--ContactRoleType:AccountOwner:",
                              "OrganisationID": "namespace:master-data--Organisation:SomeUniqueOrganisationID:",
                              "WorkflowPersonaTypeID": "namespace:reference-data--WorkflowPersonaType:SeismicProcessor:",
                              "DataGovernanceRoleTypeID": "namespace:reference-data--DataGovernanceRoleType:SME:",
                              "Name": "John Smith"
                            }
                          ],
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractContact_1__field_1__Field0"
                          }
                        },
                        "UnacceptableUsage": {
                          "title": "Unacceptable Usage",
                          "description": "List of workflows and/or personas that the technical assurance value is not valid for (e.g., This data is not trusted for seismic interpretation)",
                          "example": [
                            {
                              "DataQualityID": "namespace:work-product-component--DataQuality:d79bf97c-ff7c-4b82-89b5-c88520c15017:1562066009929332",
                              "ValueChainStatusTypeID": "namespace:reference-data--ValueChainStatusType:FieldDevelopment:",
                              "WorkflowPersonaTypeID": "namespace:reference-data--WorkflowPersonaType:SeismicInterpreter:",
                              "WorkflowUsageTypeID": "namespace:reference-data--WorkflowUsageType:SeismicInterpretation:",
                              "DataQualityRuleSetID": "namespace:reference-data--DataQualityRuleSet:SeismicInterpretationQCRuleSet:"
                            }
                          ],
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/UnacceptableUsageItem"
                          }
                        },
                        "AcceptableUsage": {
                          "title": "Acceptable Usage",
                          "description": "List of workflows and/or personas that the technical assurance value is valid for (e.g., This data is trusted for Seismic Processing)",
                          "example": [
                            {
                              "DataQualityID": "namespace:work-product-component--DataQuality:6a433d16-07c8-4f4d-9ddc-5608e2ec4234:1562066077849221",
                              "ValueChainStatusTypeID": "namespace:reference-data--ValueChainStatusType:Exploration:",
                              "WorkflowPersonaTypeID": "namespace:reference-data--WorkflowPersonaType:SeismicProcessor:",
                              "WorkflowUsageTypeID": "namespace:reference-data--WorkflowUsageType:SeismicProcessing:",
                              "DataQualityRuleSetID": "namespace:reference-data--DataQualityRuleSet:SeismicProcessingQCRuleSet:"
                            }
                          ],
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/AcceptableUsageItem"
                          }
                        },
                        "TechnicalAssuranceTypeID": {
                          "title": "Technical Assurance Type ID",
                          "description": "Describes a record's overall suitability for general business consumption based on data quality. Clarifications: Since Certified is the highest classification of suitable quality, any further change or versioning of a Certified record should be carefully considered and justified. If a Technical Assurance value is not populated then one can assume the data has not been evaluated or its quality is unknown (=Unevaluated). Technical Assurance values are not intended to be used for the identification of a single \"preferred\" or \"definitive\" record by comparison with other records.",
                          "example": "namespace:reference-data--TechnicalAssuranceType:Trusted:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-TechnicalAssuranceType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "EffectiveDate": {
                          "title": "Effective Date",
                          "description": "Date when the technical assurance determination for this record has taken place",
                          "example": "2020-02-13",
                          "type": "string",
                          "format": "date"
                        }
                      },
                      "required": [
                        "TechnicalAssuranceTypeID"
                      ]
                    },
                    "Artefact": {
                      "title": "Artefact",
                      "type": "object",
                      "properties": {
                        "ResourceID": {
                          "title": "Resourceid",
                          "description": "The SRN which identifies this OSDU Artefact resource.",
                          "pattern": "^[\\w\\-\\.]+:dataset\\-\\-[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "ResourceKind": {
                          "title": "Resourcekind",
                          "description": "The kind or schema ID of the artefact. Resolvable with the Schema Service.",
                          "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.]+:[0-9]+.[0-9]+.[0-9]+$",
                          "type": "string"
                        },
                        "RoleID": {
                          "title": "Roleid",
                          "description": "The record id of this artefact's role.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ArtefactRole:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractRemark_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "RemarkSource": {
                          "title": "Remark Source",
                          "description": "The person, vendor, interpreter or other provider of information.",
                          "type": "string"
                        },
                        "RemarkDate": {
                          "title": "Remark Date",
                          "description": "The date the remark was issued.",
                          "type": "string",
                          "format": "date"
                        },
                        "RemarkSequenceNumber": {
                          "title": "Remark Sequence Number",
                          "description": "A unique identifier for each remark record. This identifier is used to uniquely identify a member in an array of remarks.",
                          "example": 1,
                          "type": "integer"
                        },
                        "Remark": {
                          "title": "Remark",
                          "description": "A descriptive comment for this remark.",
                          "type": "string"
                        }
                      }
                    },
                    "ParentSamplesAnalysesReport": {
                      "title": "ParentSamplesAnalysesReport",
                      "type": "object",
                      "properties": {
                        "ParentSamplesAnalysesReportPageNumbers": {
                          "title": "Parentsamplesanalysesreportpagenumbers",
                          "description": "If this dataset was extracted from a larger report, this identifies the page number or range (if in document format such as PDF) or sheet names (if in document format such as spreadsheet). For ease of parsing, ranges should be denoted with hyphens with no spaces, and divided with commas). E.g. \"12-15,17\" or \"Sheet1,Sheet2\".",
                          "example": "12-15,17",
                          "type": "string"
                        },
                        "ParentSamplesAnalysesReportID": {
                          "title": "Parentsamplesanalysesreportid",
                          "description": "An OSDU Record representing the report from which this analysis was extracted or an OSDU Record from which this analysis was reconstructed.",
                          "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-SamplesAnalysesReport:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      }
                    },
                    "Data": {
                      "title": "Data",
                      "type": "object",
                      "properties": {
                        "ActivityStates": {
                          "title": "Activity States",
                          "description": "The (non-overlapping) historical activity states and effective start and termination dates. The last state is replicated in the single LastActivityState for simpler queries.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractActivityState_1__field_0__Field0"
                          }
                        },
                        "SoftwareSpecifications": {
                          "title": "Software Specifications",
                          "description": "Software names and versions used.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/SoftwareSpecification"
                          }
                        },
                        "Parameters": {
                          "title": "Parameters",
                          "description": "An array of parameter values used in one instance of activity.  It may include references to data objects which are inputs and/or outputs of the activity. The array is mandatory but can be empty.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractActivityParameter_1__field_1__Field0"
                          }
                        },
                        "ParentActivityID": {
                          "title": "Parent Activity ID",
                          "description": "The relationship to a parent activity.",
                          "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "PriorActivityIDs": {
                          "title": "Prior Activity IDs",
                          "description": "The activity or activities feeding results into this activity instance.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$"
                          }
                        },
                        "ActivityTemplateID": {
                          "title": "Activity Template ID",
                          "description": "The relation to the ActivityTemplate carrying expected parameter definitions and default values.",
                          "pattern": "^[\\w\\-\\.]+:master-data\\-\\-ActivityTemplate:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "LastActivityState": {
                          "title": "Last Activity State",
                          "description": "The current or last state this activity transitioned to. It is a copy of the last element in ActivityStates[]. If there is only one state recorded, the ActivityStates[] can stay empty.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractActivityState_1__field_0__Field0"
                            }
                          ]
                        },
                        "ParentProjectID": {
                          "title": "Parent Project ID",
                          "description": "The relationship to a parent project acting as a parent activity.",
                          "pattern": "^[\\w\\-\\.]+:master-data\\-\\-[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "SpatialArea": {
                          "title": "Spatialarea",
                          "description": "A polygon boundary that reflects the locale of the content of the work product component (location of the subject matter).",
                          "allOf": [
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractSpatialLocation_1__field_1__Field0"
                            }
                          ]
                        },
                        "Description": {
                          "title": "Description",
                          "description": "Description.  Summary of the work product component.  Not the same as Remark which captures thoughts of creator about the wpc.",
                          "type": "string"
                        },
                        "CreationDateTime": {
                          "title": "Creationdatetime",
                          "description": "Date that a resource (work  product component here) is formed outside of OSDU before loading (e.g. publication date).",
                          "type": "string",
                          "format": "date-time"
                        },
                        "BusinessActivities": {
                          "title": "Businessactivities",
                          "description": "Array of business processes/workflows that the work product component has been through (ex. well planning, exploration).",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "SpatialPoint": {
                          "title": "Spatialpoint",
                          "description": "A centroid point that reflects the locale of the content of the work product component (location of the subject matter).",
                          "allOf": [
                            {
                              "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractSpatialLocation_1__field_1__Field0"
                            }
                          ]
                        },
                        "GeoContexts": {
                          "title": "Geocontexts",
                          "description": "List of geographic entities which provide context to the WPC.  This may include multiple types or multiple values of the same type.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractGeoContext_1__field_0__Field0"
                          }
                        },
                        "AuthorIDs": {
                          "title": "Author IDs",
                          "description": "Array of Authors' names of the work product component.  Could be a person or company entity.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "SubmitterName": {
                          "title": "Submittername",
                          "description": "Name of the person that first submitted the work product component to OSDU.",
                          "type": "string"
                        },
                        "LineageAssertions": {
                          "title": "Lineageassertions",
                          "description": "Defines relationships with other objects (any kind of Resource) upon which this work product component depends.  The assertion is directed only from the asserting WPC to ancestor objects, not children.  It should not be used to refer to files or artefacts within the WPC -- the association within the WPC is sufficient and Artefacts are actually children of the main WPC file. They should be recorded in the data.Artefacts[] array.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/LineageAssertion"
                          }
                        },
                        "Tags": {
                          "title": "Tags",
                          "description": "Array of key words to identify the work product, especially to help in search.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "Name": {
                          "title": "Name",
                          "description": "Name",
                          "type": "string"
                        },
                        "Datasets": {
                          "title": "Datasets",
                          "description": "The record id, which identifies this OSDU File or dataset resource.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[\\w\\-\\.]+:dataset\\-\\-[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$"
                          }
                        },
                        "DDMSDatasets": {
                          "title": "DDMS Datasets",
                          "description": "An array of references to content in Domain Data Management Services represented by this work-product-component. The references are formed as URI following https://www.rfc-editor.org/rfc/rfc3986#page-16. This property is exclusively populated by DDMSs. If a work-product-component is represented in more than one DDMS, DDMSs are obliged to find the specific reference by inspecting the URI's authority values matching the DDMS id.",
                          "example": [
                            "urn://wddms-3/uuid:20840361-adc0-4842-999b-5639bd07bb38",
                            "eml://rddms-1/dataspace('demo/Volve')/resqml20.obj_ContinuousProperty(1615d8d2-2a2d-482c-885e-14225b89e90c)"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^(([^:/?#]+):)(\\/\\/([^/?#]+))(\\/[^?#]+)(\\?([^#]*))?(#(.*))?"
                          }
                        },
                        "NameAliases": {
                          "title": "Namealiases",
                          "description": "Alternative names, including historical, by which this work-product-component is/has been known (it should include all the identifiers).",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractAliasNames_1__field_0__Field0"
                          }
                        },
                        "IsDiscoverable": {
                          "title": "Isdiscoverable",
                          "description": "A flag that indicates if the work product component is searchable, which means covered in the search index.",
                          "type": "boolean"
                        },
                        "TechnicalAssurances": {
                          "title": "Technical Assurances",
                          "description": "Describes a record's overall suitability for general business consumption based on data quality. Clarifications: Since Certified is the highest classification of suitable quality, any further change or versioning of a Certified record should be carefully considered and justified. If a Technical Assurance value is not populated then one can assume the data has not been evaluated or its quality is unknown (=Unevaluated). Technical Assurance values are not intended to be used for the identification of a single \"preferred\" or \"definitive\" record by comparison with other records.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractTechnicalAssurance_1__field_2__Field0"
                          }
                        },
                        "Artefacts": {
                          "title": "Artefacts",
                          "description": "An array of Artefacts - each artefact has a Role, Resource tuple. An artefact is distinct from the file, in the sense certain valuable information is generated during loading process (Artefact generation process). Examples include retrieving location data, performing an OCR which may result in the generation of artefacts which need to be preserved distinctly",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/Artefact"
                          }
                        },
                        "IsExtendedLoad": {
                          "title": "Isextendedload",
                          "description": "A flag that indicates if the work product component is undergoing an extended load.  It reflects the fact that the work product component is in an early stage and may be updated before finalization.",
                          "type": "boolean"
                        },
                        "ResourceHomeRegionID": {
                          "title": "Resource Home Region ID",
                          "description": "The name of the home [cloud environment] region for this OSDU resource object.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-OSDURegion:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "ResourceHostRegionIDs": {
                          "title": "Resource Host Region ID",
                          "description": "The name of the host [cloud environment] region(s) for this OSDU resource object.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-OSDURegion:[\\w\\-\\.\\:\\%]+:[0-9]*$"
                          }
                        },
                        "ResourceLifecycleStatus": {
                          "title": "Resource Lifecycle Status",
                          "description": "Describes the current Resource Lifecycle status.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceLifecycleStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "ResourceSecurityClassification": {
                          "title": "Resource Security Classification",
                          "description": "Classifies the security level of the resource.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceSecurityClassification:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "ResourceCurationStatus": {
                          "title": "Resource Curation Status",
                          "description": "Describes the current Curation status.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceCurationStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "ExistenceKind": {
                          "title": "Existence Kind",
                          "description": "Where does this data resource sit in the cradle-to-grave span of its existence?",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ExistenceKind:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "TechnicalAssuranceID": {
                          "title": "Technical Assurance ID",
                          "description": "DEPRECATED: Describes a record's overall suitability for general business consumption based on data quality. Clarifications: Since Certified is the highest classification of suitable quality, any further change or versioning of a Certified record should be carefully considered and justified. If a Technical Assurance value is not populated then one can assume the data has not been evaluated or its quality is unknown (=Unevaluated). Technical Assurance values are not intended to be used for the identification of a single \"preferred\" or \"definitive\" record by comparison with other records.",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-TechnicalAssuranceType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "Source": {
                          "title": "Data Source",
                          "description": "The entity that produced the record, or from which it is received; could be an organization, agency, system, internal team, or individual. For informational purposes only, the list of sources is not governed.",
                          "type": "string"
                        },
                        "LaboratoryNames": {
                          "title": "Laboratorynames",
                          "description": "List of names of laboratories used to conduct the sample analyses contained in this report. This attribute is more freeform than Laboratory IDs and does not have relationships to OSDU Record IDs.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "LaboratoryIDs": {
                          "title": "Laboratory ID",
                          "description": "OSDU Record IDs for the laboratories used to conduct the sample analyses contained in this report.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$"
                          }
                        },
                        "Remarks": {
                          "title": "Remarks",
                          "description": "An array containing operational or quality comments pertaining to the sample analysis represented by this work product component.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/app__models__domain__osdu__osdu_wks_AbstractRemark_1__field_0__Field0"
                          }
                        },
                        "SampleIDs": {
                          "title": "Sampleids",
                          "description": "OSDU Record IDs for the Rock and/or Fluid Sample or Samples on which this batch or batches of analysis were performed.",
                          "example": [
                            "namespace:master-data--Sample:Kentish-Knock-South-1_KK-16:",
                            "namespace:master-data--Sample:Kentish-Knock-South-1_KK-17:",
                            "namespace:master-data--Sample:Kentish-Knock-South-1_KK-21:"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Sample:[\\w\\-\\.\\:\\%]+:[0-9]*$"
                          }
                        },
                        "ReportSampleIdentifiers": {
                          "title": "Reportsampleidentifiers",
                          "description": "The names or identifiers of the analyzed samples in this report or document. These names or identifiers are often assigned by the laboratory. This list can be used to assist in locating the appropriate OSDU Sample records or to find the dataset in the parent report.",
                          "example": [
                            "KK-16",
                            "KK-17",
                            "KK-21"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "LaboratoryAnalysts": {
                          "title": "Laboratory Contact",
                          "description": "The names and other information of the analysts responsible for conducting and reporting on the analysis performed",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "SamplesAnalysisCategoryTagIDs": {
                          "title": "Samplesanalysiscategorytagids",
                          "description": "List of higher level grouping terms that are often used within organisations to search for analysis types in addition to the formal Family and Method properties, but which are variable across organisations and therefore do not need to be governed strictly by the OSDU Forum. For example: SCAL, Static SCAL, Dynamic SCAL, Source Rock Analysis. We suggest you use a namespace, like the operators name, like �Shell.SCAL�. BP.SCAL, Equinor.SCAL, Chevron.SCAL, Exxon.SCAL.....",
                          "example": [
                            "namespace:reference-data--SamplesAnalysisCategoryTag:ExxonMobil-SCAL:"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-SamplesAnalysisCategoryTag:[\\w\\-\\.\\:\\%]+:[0-9]*$"
                          }
                        },
                        "ParentSamplesAnalysesReports": {
                          "title": "Parentsamplesanalysesreports",
                          "description": "Identifies the report from which this analysis was extracted or multiple reports from which this analysis was reconstructed.",
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/ParentSamplesAnalysesReport"
                          }
                        },
                        "SampleAnalysisTypeIDs": {
                          "title": "Sampleanalysistypeids",
                          "description": "A list of all sample analysis types represented by this report, whether the sample analysis type relates to Rock, Fluid, or both.",
                          "example": [
                            "namespace:reference-data--SampleAnalysisType:Wettability.Amott-Harvey:"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-SampleAnalysisType:[\\w\\-\\.\\:\\%]+:[0-9]*$"
                          }
                        },
                        "DateAnalyzed": {
                          "title": "Dateanalyzed",
                          "description": "The date the batch of sample analysis was completed.",
                          "type": "string",
                          "format": "date"
                        },
                        "DatePublished": {
                          "title": "Datepublished",
                          "description": "The date and time that the results of the analysis containing observed measurements or calculations was published.",
                          "type": "string",
                          "format": "date"
                        },
                        "ExtensionProperties": {
                          "title": "Extensionproperties",
                          "type": "object"
                        }
                      }
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractAccessControlList_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "viewers": {
                          "title": "List of Viewers",
                          "description": "The list of viewers to which this data record is accessible/visible/discoverable formatted as an email (core.common.model.storage.validation.ValidationDoc.EMAIL_REGEX).",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$"
                          }
                        },
                        "owners": {
                          "title": "List of Owners",
                          "description": "The list of owners of this data record formatted as an email (core.common.model.storage.validation.ValidationDoc.EMAIL_REGEX).",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$"
                          }
                        }
                      },
                      "required": [
                        "viewers",
                        "owners"
                      ],
                      "additionalProperties": false
                    },
                    "Field0Item": {
                      "title": "Field0Item",
                      "type": "object",
                      "properties": {
                        "persistableReference": {
                          "title": "UOM Persistable Reference",
                          "description": "The self-contained, persistable reference string uniquely identifying the Unit.",
                          "example": "{\"abcd\":{\"a\":0.0,\"b\":1200.0,\"c\":3937.0,\"d\":0.0},\"symbol\":\"ft[US]\",\"baseMeasurement\":{\"ancestry\":\"L\",\"type\":\"UM\"},\"type\":\"UAD\"}",
                          "type": "string"
                        },
                        "kind": {
                          "title": "UOM Reference Kind",
                          "description": "The kind of reference, 'Unit' for FrameOfReferenceUOM.",
                          "default": "Unit",
                          "const": "Unit",
                          "type": "string"
                        },
                        "propertyNames": {
                          "title": "UOM Property Names",
                          "description": "The list of property names, to which this meta data item provides Unit context to. A full path like \"StructureA.PropertyB\" is required to define a unique context; \"data\" is omitted since frame-of reference normalization only applies to the data block.",
                          "example": [
                            "HorizontalDeflection.EastWest",
                            "HorizontalDeflection.NorthSouth"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "title": "UOM Unit Symbol",
                          "description": "The unit symbol or name of the unit.",
                          "example": "ft[US]",
                          "type": "string"
                        },
                        "unitOfMeasureID": {
                          "title": "Unitofmeasureid",
                          "description": "SRN to unit of measure reference.",
                          "example": "namespace:reference-data--UnitOfMeasure:ftUS:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-UnitOfMeasure:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        }
                      },
                      "required": [
                        "persistableReference"
                      ]
                    },
                    "Field0ItemModel": {
                      "title": "Field0ItemModel",
                      "type": "object",
                      "properties": {
                        "coordinateReferenceSystemID": {
                          "title": "Coordinatereferencesystemid",
                          "description": "SRN to CRS reference.",
                          "example": "namespace:reference-data--CoordinateReferenceSystem:Projected:EPSG::32615:",
                          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-CoordinateReferenceSystem:[\\w\\-\\.\\:\\%]+:[0-9]*$",
                          "type": "string"
                        },
                        "persistableReference": {
                          "title": "CRS Persistable Reference",
                          "description": "The self-contained, persistable reference string uniquely identifying the CRS.",
                          "example": "{\"authCode\":{\"auth\":\"EPSG\",\"code\":\"32615\"},\"name\":\"WGS_1984_UTM_Zone_15N\",\"type\":\"LBC\",\"ver\":\"PE_10_9_1\",\"wkt\":\"PROJCS[\\\"WGS_1984_UTM_Zone_15N\\\",GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"False_Easting\\\",500000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-93.0],PARAMETER[\\\"Scale_Factor\\\",0.9996],PARAMETER[\\\"Latitude_Of_Origin\\\",0.0],UNIT[\\\"Meter\\\",1.0],AUTHORITY[\\\"EPSG\\\",32615]]\"}",
                          "type": "string"
                        },
                        "kind": {
                          "title": "CRS Reference Kind",
                          "description": "The kind of reference, constant 'CRS' for FrameOfReferenceCRS.",
                          "default": "CRS",
                          "const": "CRS",
                          "type": "string"
                        },
                        "propertyNames": {
                          "title": "CRS Property Names",
                          "description": "The list of property names, to which this meta data item provides CRS context to. A full path like \"StructureA.PropertyB\" is required to define a unique context; \"data\" is omitted since frame-of reference normalization only applies to the data block.",
                          "example": [
                            "KickOffPosition.X",
                            "KickOffPosition.Y"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "title": "CRS Name",
                          "description": "The name of the CRS.",
                          "example": "WGS 84 / UTM zone 15N",
                          "type": "string"
                        }
                      },
                      "required": [
                        "persistableReference"
                      ]
                    },
                    "Field0ItemModel1": {
                      "title": "Field0ItemModel1",
                      "type": "object",
                      "properties": {
                        "persistableReference": {
                          "title": "DateTime Persistable Reference",
                          "description": "The self-contained, persistable reference string uniquely identifying DateTime reference.",
                          "example": "{\"format\":\"yyyy-MM-ddTHH:mm:ssZ\",\"timeZone\":\"UTC\",\"type\":\"DTM\"}",
                          "type": "string"
                        },
                        "kind": {
                          "title": "DateTime Reference Kind",
                          "description": "The kind of reference, constant 'DateTime', for FrameOfReferenceDateTime.",
                          "default": "DateTime",
                          "const": "DateTime",
                          "type": "string"
                        },
                        "propertyNames": {
                          "title": "DateTime Property Names",
                          "description": "The list of property names, to which this meta data item provides DateTime context to. A full path like \"StructureA.PropertyB\" is required to define a unique context; \"data\" is omitted since frame-of reference normalization only applies to the data block.",
                          "example": [
                            "Acquisition.StartTime",
                            "Acquisition.EndTime"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "title": "DateTime Name",
                          "description": "The name of the DateTime format and reference.",
                          "example": "UTC",
                          "type": "string"
                        }
                      },
                      "required": [
                        "persistableReference"
                      ]
                    },
                    "Field0ItemModel2": {
                      "title": "Field0ItemModel2",
                      "type": "object",
                      "properties": {
                        "persistableReference": {
                          "title": "AzimuthReference Persistable Reference",
                          "description": "The self-contained, persistable reference string uniquely identifying AzimuthReference.",
                          "example": "{\"code\":\"TrueNorth\",\"type\":\"AZR\"}",
                          "type": "string"
                        },
                        "kind": {
                          "title": "AzimuthReference Reference Kind",
                          "description": "The kind of reference, constant 'AzimuthReference', for FrameOfReferenceAzimuthReference.",
                          "default": "AzimuthReference",
                          "const": "AzimuthReference",
                          "type": "string"
                        },
                        "propertyNames": {
                          "title": "AzimuthReference Property Names",
                          "description": "The list of property names, to which this meta data item provides AzimuthReference context to. A full path like \"StructureA.PropertyB\" is required to define a unique context; \"data\" is omitted since frame-of reference normalization only applies to the data block.",
                          "example": [
                            "Bearing"
                          ],
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "name": {
                          "title": "AzimuthReference Name",
                          "description": "The name of the CRS or the symbol/name of the unit.",
                          "example": "TrueNorth",
                          "type": "string"
                        }
                      },
                      "required": [
                        "persistableReference"
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractMetaItem_1__field_0__Field0": {
                      "title": "Field0",
                      "description": "A meta data item, which allows the association of named properties or property values to a Unit/Measurement/CRS/Azimuth/Time context.",
                      "anyOf": [
                        {
                          "$ref": "#/definitions/Field0Item"
                        },
                        {
                          "$ref": "#/definitions/Field0ItemModel"
                        },
                        {
                          "$ref": "#/definitions/Field0ItemModel1"
                        },
                        {
                          "$ref": "#/definitions/Field0ItemModel2"
                        }
                      ]
                    },
                    "app__models__domain__osdu__osdu_wks_AbstractLegalTags_1__field_0__Field0": {
                      "title": "Field0",
                      "type": "object",
                      "properties": {
                        "legaltags": {
                          "title": "Legal Tags",
                          "description": "The list of legal tags, which resolve to legal properties (like country of origin, export classification code, etc.) and rules with the help of the Compliance Service.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "otherRelevantDataCountries": {
                          "title": "Other Relevant Data Countries",
                          "description": "The list of other relevant data countries as an array of two-letter country codes, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "pattern": "^[A-Z]{2}$"
                          }
                        },
                        "status": {
                          "title": "Legal Status",
                          "description": "The legal status. Set by the system after evaluation against the compliance rules associated with the \"legaltags\" using the Compliance Service.",
                          "pattern": "^(compliant|uncompliant)$",
                          "type": "string"
                        }
                      },
                      "required": [
                        "legaltags",
                        "otherRelevantDataCountries"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              },
              "example": [
                {
                  "id": "namespace:work-product-component--SamplesAnalysis:SamplesAnalysisExample",
                  "kind": "osdu:wks:work-product-component--SamplesAnalysis:1.0.0",
                  "acl": {
                    "viewers": [
                      "someone@company.com"
                    ],
                    "owners": [
                      "someone@company.com"
                    ]
                  },
                  "legal": {
                    "legaltags": [
                      "Example legaltags"
                    ],
                    "otherRelevantDataCountries": [
                      "US"
                    ],
                    "status": "compliant"
                  },
                  "tags": {
                    "NameOfKey": "String value"
                  },
                  "data": {
                    "SampleIDs": [
                      "namespace:master-data--Sample:dd76cf6c-226f-5636-ad1b-1ca0f8249cc11:"
                    ],
                    "ReportSampleIdentifiers": [
                      "88Y"
                    ],
                    "AnalysisDate": "2022-12-16",
                    "LaboratoryIDs": [
                      "namespace:master-data--Organisation:TBD_Lab_1:"
                    ],
                    "LaboratoryNames": [
                      "TestLab"
                    ],
                    "LaboratoryAnalysts": [
                      "Analyst Contact 1"
                    ],
                    "Remarks": [
                      {
                        "Remark": "Test was successfully conducted",
                        "RemarkSequenceNumber": 1,
                        "RemarkSource": "Lab",
                        "RemarkDate": "2023-10-23"
                      }
                    ],
                    "DateAnalyzed": "2022-12-01",
                    "DatePublished": "2022-12-16",
                    "ParentSamplesAnalysesReports": [
                      {
                        "ParentSamplesAnalysesReportID": "namespace:work-product-component--SamplesAnalysesReport:SamplesAnalysesReport:"
                      }
                    ],
                    "SampleAnalysisTypeIDs": [
                      "namespace:reference-data--SampleAnalysisType:CapillaryPressure.Centrifuge:"
                    ],
                    "SamplesAnalysisCategoryTagIDs": [
                      "namespace:reference-data--SamplesAnalysisCategoryTag:GreenCompany.SCAL:"
                    ],
                    "DDMSDatasets": [
                      
                    ]
                  }
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/{analysistype}/data/schema": {
      "get": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Get Content Schema",
        "description": "Get the (`content schema`) for a given `{analysistype}`. <br><br>                Use the `Accept` request header to specify content schema version                     (example header `Accept: application/json;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_content_schema_api_rafs_ddms_v2_samplesanalysis__analysistype__data_schema_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Analysistype"
            },
            "name": "analysistype",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "items": {
                      
                    },
                    "type": "array"
                  },
                  "type": "object",
                  "title": "Response Get Content Schema Api Rafs Ddms V2 Samplesanalysis  Analysistype  Data Schema Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/{record_id}/data/{analysis_type}/{dataset_id}": {
      "get": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Get Data V2",
        "description": "Get the (`latest version`) bulk data for a given `{analysis_type}` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_v2_api_rafs_ddms_v2_samplesanalysis__record_id__data__analysis_type___dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Analysis Type"
            },
            "name": "analysis_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/{record_id}/data/{analysis_type}": {
      "post": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Post Data V2",
        "description": "Upload the bulk data for a given `{analysis_type}` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_v2_api_rafs_ddms_v2_samplesanalysis__record_id__data__analysis_type__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:work-product-component--SamplesAnalysis:[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Analysis Type"
            },
            "name": "analysis_type",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data V2 Api Rafs Ddms V2 Samplesanalysis  Record Id  Data  Analysis Type  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "OrientSplit",
                "type": "object",
                "properties": {
                  "columns": {
                    "title": "Columns",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "index": {
                    "title": "Index",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "data": {
                    "title": "Data",
                    "minItems": 1,
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        
                      }
                    }
                  }
                },
                "required": [
                  "columns",
                  "index",
                  "data"
                ],
                "additionalProperties": false
              },
              "example": {
                "columns": [
                  "SamplesAnalysisID",
                  "TestMethod",
                  "SalinityTestResults",
                  "SalinityTestSteps"
                ],
                "index": [
                  0
                ],
                "data": [
                  [
                    "namespace:work-product-component--SamplesAnalysis:multiple_salinity_example:",
                    "TestMethod",
                    [
                      {
                        "SampleID": "namespace:master-data--Sample:test_id:",
                        "BQv": {
                          "Value": 3.5,
                          "UnitOfMeasure": "namespace:reference-data--UnitOfMeasure:%25:"
                        },
                        "Qv": {
                          "Value": 3.5,
                          "UnitOfMeasure": "namespace:reference-data--UnitOfMeasure:%25:"
                        }
                      },
                      {
                        "SampleID": "namespace:master-data--Sample:test_id:",
                        "BQv": {
                          "Value": 4.5,
                          "UnitOfMeasure": "namespace:reference-data--UnitOfMeasure:%25:"
                        },
                        "Qv": {
                          "Value": 4.5,
                          "UnitOfMeasure": "namespace:reference-data--UnitOfMeasure:%25:"
                        }
                      }
                    ],
                    [
                      {
                        "BrineSalinity": {
                          "Value": 3.5,
                          "UnitOfMeasure": "namespace:reference-data--UnitOfMeasure:%25:"
                        },
                        "BrineConductivity": {
                          "Value": 3.5,
                          "UnitOfMeasure": "namespace:reference-data--UnitOfMeasure:%25:"
                        },
                        "CoreConductivity": {
                          "Value": 3.5,
                          "UnitOfMeasure": "namespace:reference-data--UnitOfMeasure:%25:"
                        }
                      }
                    ]
                  ]
                ]
              }
            }
          }
        }
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/{analysis_type}/search/data": {
      "get": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Get Search Data",
        "description": "Get the (`queried`) bulk data from every `{analysis_type}` found in search service. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_search_data_api_rafs_ddms_v2_samplesanalysis__analysis_type__search_data_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Analysis Type"
            },
            "name": "analysis_type",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/samplesanalysis/{analysis_type}/search": {
      "get": {
        "tags": [
          "samplesanalysis"
        ],
        "summary": "Get Search",
        "description": "Get the (`samples analysis`) ids list that comply with `{query}` for given`{analysis_type}`. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_search_api_rafs_ddms_v2_samplesanalysis__analysis_type__search_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Analysis Type"
            },
            "name": "analysis_type",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/masterdata/{record_id}": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v2_masterdata__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(master-data--GenericFacility|master-data--GenericSite|master-data--Sample|master-data--SampleAcquisitionJob|master-data--SampleChainOfCustodyEvent|master-data--SampleContainer):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V2 Masterdata  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "masterdata"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v2_masterdata__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(master-data--GenericFacility|master-data--GenericSite|master-data--Sample|master-data--SampleAcquisitionJob|master-data--SampleChainOfCustodyEvent|master-data--SampleContainer):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/masterdata/{record_id}/versions": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v2_masterdata__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(master-data--GenericFacility|master-data--GenericSite|master-data--Sample|master-data--SampleAcquisitionJob|master-data--SampleChainOfCustodyEvent|master-data--SampleContainer):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V2 Masterdata  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/masterdata/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "masterdata"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v2_masterdata__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(master-data--GenericFacility|master-data--GenericSite|master-data--Sample|master-data--SampleAcquisitionJob|master-data--SampleChainOfCustodyEvent|master-data--SampleContainer):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V2 Masterdata  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/masterdata": {
      "post": {
        "tags": [
          "masterdata"
        ],
        "summary": "Post Records",
        "description": "Create or update `(osdu:wks:master-data--GenericFacility:1.0.0|osdu:wks:master-data--GenericSite:1.0.0|osdu:wks:master-data--Sample:2.0.0|osdu:wks:master-data--SampleAcquisitionJob:1.0.0|osdu:wks:master-data--SampleChainOfCustodyEvent:1.0.0|osdu:wks:master-data--SampleContainer:1.0.0)` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v2_masterdata_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "MasterDataRecords",
                "description": "Master Data records payload",
                "type": "array",
                "items": {
                  "title": "OsduStorageRecord",
                  "type": "object",
                  "properties": {
                    "id": {
                      "title": "Id",
                      "type": "string"
                    },
                    "kind": {
                      "title": "Kind",
                      "type": "string"
                    },
                    "acl": {
                      "$ref": "#/definitions/Acl"
                    },
                    "legal": {
                      "$ref": "#/definitions/Legal"
                    },
                    "data": {
                      "title": "Data",
                      "type": "object"
                    },
                    "meta": {
                      "title": "Meta",
                      "type": "array",
                      "items": {
                        
                      }
                    },
                    "ancestry": {
                      "title": "Ancestry",
                      "type": "object"
                    },
                    "tags": {
                      "title": "Tags",
                      "type": "object"
                    },
                    "version": {
                      "title": "Version",
                      "type": "integer"
                    },
                    "createUser": {
                      "title": "Createuser",
                      "type": "string"
                    },
                    "createTime": {
                      "title": "Createtime",
                      "type": "string"
                    },
                    "modifyUser": {
                      "title": "Modifyuser",
                      "type": "string"
                    },
                    "modifyTime": {
                      "title": "Modifytime",
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "acl",
                    "legal",
                    "data"
                  ],
                  "definitions": {
                    "Acl": {
                      "title": "Acl",
                      "type": "object",
                      "properties": {
                        "viewers": {
                          "title": "Viewers",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "owners": {
                          "title": "Owners",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "viewers",
                        "owners"
                      ]
                    },
                    "Legal": {
                      "title": "Legal",
                      "type": "object",
                      "properties": {
                        "legaltags": {
                          "title": "Legaltags",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "otherRelevantDataCountries": {
                          "title": "Otherrelevantdatacountries",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "status": {
                          "title": "Status",
                          "type": "string"
                        }
                      },
                      "required": [
                        "legaltags",
                        "otherRelevantDataCountries"
                      ]
                    }
                  }
                }
              },
              "example": {
                "id": "namespace:master-data--Sample:Sample_200",
                "kind": "osdu:wks:master-data--Sample:2.0.0",
                "acl": {
                  "owners": [
                    "someone@company.com"
                  ],
                  "viewers": [
                    "someone@company.com"
                  ]
                },
                "legal": {
                  "legaltags": [
                    "Example legaltags"
                  ],
                  "otherRelevantDataCountries": [
                    "US"
                  ],
                  "status": "compliant"
                },
                "tags": {
                  "NameOfKey": "String value"
                },
                "ancestry": {
                  "parents": [
                    
                  ]
                },
                "meta": [
                  
                ],
                "data": {
                  "ResourceHomeRegionID": "namespace:reference-data--OSDURegion:AWSEastUSA:",
                  "ResourceHostRegionIDs": [
                    "namespace:reference-data--OSDURegion:AWSEastUSA:"
                  ],
                  "ResourceCurationStatus": "namespace:reference-data--ResourceCurationStatus:Created:",
                  "ResourceLifecycleStatus": "namespace:reference-data--ResourceLifecycleStatus:Loading:",
                  "ResourceSecurityClassification": "namespace:reference-data--ResourceSecurityClassification:Public:",
                  "Source": "Example Data Source",
                  "ExistenceKind": "namespace:reference-data--ExistenceKind:Prototype:",
                  "NameAliases": [
                    {
                      "AliasName": "Example AliasName",
                      "AliasNameTypeID": "namespace:reference-data--AliasNameType:RegulatoryIdentifier:",
                      "DefinitionOrganisationID": "namespace:master-data--Organisation:SomeUniqueOrganisationID:",
                      "EffectiveDateTime": "2020-02-13T09:13:15.55Z",
                      "TerminationDateTime": "2020-02-13T09:13:15.55Z"
                    }
                  ],
                  "GeoContexts": [
                    {
                      "GeoPoliticalEntityID": "namespace:master-data--GeoPoliticalEntity:SomeUniqueGeoPoliticalEntityID:",
                      "GeoTypeID": "namespace:reference-data--GeoPoliticalEntityType:Area:"
                    },
                    {
                      "BasinID": "namespace:master-data--Basin:SomeUniqueBasinID:",
                      "GeoTypeID": "namespace:reference-data--BasinType:ArcWrenchOceanContinent:"
                    },
                    {
                      "FieldID": "namespace:master-data--Field:SomeUniqueFieldID:",
                      "GeoTypeID": "Field"
                    },
                    {
                      "PlayID": "namespace:master-data--Play:SomeUniquePlayID:",
                      "GeoTypeID": "namespace:reference-data--PlayType:CarbonCaptureAndStorage:"
                    },
                    {
                      "ProspectID": "namespace:master-data--Prospect:SomeUniqueProspectID:",
                      "GeoTypeID": "namespace:reference-data--ProspectType:Structural.Anticline:"
                    }
                  ],
                  "SpatialLocation": {
                    "SpatialLocationCoordinatesDate": "2020-02-13T09:13:15.55Z",
                    "QuantitativeAccuracyBandID": "namespace:reference-data--QuantitativeAccuracyBand:Length.LessThan1m:",
                    "QualitativeSpatialAccuracyTypeID": "namespace:reference-data--QualitativeSpatialAccuracyType:Assumed:",
                    "CoordinateQualityCheckPerformedBy": "Example CoordinateQualityCheckPerformedBy",
                    "CoordinateQualityCheckDateTime": "2020-02-13T09:13:15.55Z",
                    "CoordinateQualityCheckRemarks": [
                      "Example CoordinateQualityCheckRemarks"
                    ],
                    "AsIngestedCoordinates": {
                      "type": "AnyCrsFeatureCollection",
                      "CoordinateReferenceSystemID": "namespace:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:",
                      "VerticalCoordinateReferenceSystemID": "namespace:reference-data--CoordinateReferenceSystem:Vertical:EPSG::5714:",
                      "VerticalUnitID": "namespace:reference-data--UnitOfMeasure:m:",
                      "persistableReferenceCrs": "{\"authCode\":{\"auth\":\"OSDU\",\"code\":\"32021079\"},\"lateBoundCRS\":{\"authCode\":{\"auth\":\"EPSG\",\"code\":\"32021\"},\"name\":\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\",\"type\":\"LBC\",\"ver\":\"PE_10_9_1\",\"wkt\":\"PROJCS[\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-100.5],PARAMETER[\\\"Standard_Parallel_1\\\",46.18333333333333],PARAMETER[\\\"Standard_Parallel_2\\\",47.48333333333333],PARAMETER[\\\"Latitude_Of_Origin\\\",45.66666666666666],UNIT[\\\"Foot_US\\\",0.3048006096012192],AUTHORITY[\\\"EPSG\\\",32021]]\"},\"name\":\"NAD27 * OGP-Usa Conus / North Dakota CS27 South zone [32021,15851]\",\"singleCT\":{\"authCode\":{\"auth\":\"EPSG\",\"code\":\"15851\"},\"name\":\"NAD_1927_To_WGS_1984_79_CONUS\",\"type\":\"ST\",\"ver\":\"PE_10_9_1\",\"wkt\":\"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],OPERATIONACCURACY[5.0],AUTHORITY[\\\"EPSG\\\",15851]]\"},\"type\":\"EBC\",\"ver\":\"PE_10_9_1\"}",
                      "persistableReferenceVerticalCrs": "{\"authCode\":{\"auth\":\"EPSG\",\"code\":\"5714\"},\"name\":\"MSL_Height\",\"type\":\"LBC\",\"ver\":\"PE_10_9_1\",\"wkt\":\"VERTCS[\\\"MSL_Height\\\",VDATUM[\\\"Mean_Sea_Level\\\"],PARAMETER[\\\"Vertical_Shift\\\",0.0],PARAMETER[\\\"Direction\\\",1.0],UNIT[\\\"Meter\\\",1.0],AUTHORITY[\\\"EPSG\\\",5714]]\"}",
                      "persistableReferenceUnitZ": "{\"scaleOffset\":{\"scale\":1.0,\"offset\":0.0},\"symbol\":\"m\",\"baseMeasurement\":{\"ancestry\":\"Length\",\"type\":\"UM\"},\"type\":\"USO\"}",
                      "features": [
                        {
                          "type": "AnyCrsFeature",
                          "properties": {
                            
                          },
                          "geometry": {
                            "type": "AnyCrsPoint",
                            "coordinates": [
                              12345.6,
                              12345.6
                            ],
                            "bbox": [
                              12345.6,
                              12345.6,
                              12345.6,
                              12345.6
                            ]
                          },
                          "bbox": [
                            12345.6,
                            12345.6,
                            12345.6,
                            12345.6
                          ]
                        }
                      ],
                      "bbox": [
                        12345.6,
                        12345.6,
                        12345.6,
                        12345.6
                      ]
                    },
                    "Wgs84Coordinates": {
                      "type": "FeatureCollection",
                      "features": [
                        {
                          "type": "Feature",
                          "properties": {
                            
                          },
                          "geometry": {
                            "type": "Point",
                            "coordinates": [
                              12345.6,
                              12345.6
                            ],
                            "bbox": [
                              12345.6,
                              12345.6,
                              12345.6,
                              12345.6
                            ]
                          },
                          "bbox": [
                            12345.6,
                            12345.6,
                            12345.6,
                            12345.6
                          ]
                        }
                      ],
                      "bbox": [
                        12345.6,
                        12345.6,
                        12345.6,
                        12345.6
                      ]
                    },
                    "AppliedOperations": [
                      "conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted",
                      "transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed"
                    ],
                    "SpatialParameterTypeID": "namespace:reference-data--SpatialParameterType:Outline:",
                    "SpatialGeometryTypeID": "namespace:reference-data--SpatialGeometryType:Point:"
                  },
                  "VersionCreationReason": "Example VersionCreationReason",
                  "TechnicalAssuranceTypeID": "namespace:reference-data--TechnicalAssuranceType:Certified:",
                  "TechnicalAssurances": [
                    {
                      "TechnicalAssuranceTypeID": "namespace:reference-data--TechnicalAssuranceType:Trusted:",
                      "Reviewers": [
                        {
                          "RoleTypeID": "namespace:reference-data--ContactRoleType:AccountOwner:",
                          "DataGovernanceRoleTypeID": "namespace:reference-data--DataGovernanceRoleType:SME:",
                          "WorkflowPersonaTypeID": "namespace:reference-data--WorkflowPersonaType:SeismicProcessor:",
                          "OrganisationID": "namespace:master-data--Organisation:SomeUniqueOrganisationID:",
                          "Name": "John Smith"
                        }
                      ],
                      "AcceptableUsage": [
                        {
                          "WorkflowUsageTypeID": "namespace:reference-data--WorkflowUsageType:SeismicProcessing:",
                          "WorkflowPersonaTypeID": "namespace:reference-data--WorkflowPersonaType:SeismicProcessor:",
                          "DataQualityRuleSetID": "namespace:reference-data--DataQualityRuleSet:SeismicProcessingQCRuleSet:",
                          "DataQualityID": "namespace:work-product-component--DataQuality:6a433d16-07c8-4f4d-9ddc-5608e2ec4234:1562066077849221",
                          "ValueChainStatusTypeID": "namespace:reference-data--ValueChainStatusType:Exploration:"
                        }
                      ],
                      "UnacceptableUsage": [
                        {
                          "WorkflowUsageTypeID": "namespace:reference-data--WorkflowUsageType:SeismicInterpretation:",
                          "WorkflowPersonaTypeID": "namespace:reference-data--WorkflowPersonaType:SeismicInterpreter:",
                          "DataQualityRuleSetID": "namespace:reference-data--DataQualityRuleSet:SeismicInterpretationQCRuleSet:",
                          "DataQualityID": "namespace:work-product-component--DataQuality:d79bf97c-ff7c-4b82-89b5-c88520c15017:1562066009929332",
                          "ValueChainStatusTypeID": "namespace:reference-data--ValueChainStatusType:FieldDevelopment:"
                        }
                      ],
                      "EffectiveDate": "2020-02-13",
                      "Comment": "This is free form text from reviewer, e.g. restrictions on use"
                    }
                  ],
                  "SampleIdentifier": "sample1A",
                  "SampleName": "sampleA",
                  "SampleOriginTypeID": "namespace:reference-data--SampleOriginType:Synthetic:",
                  "SampleTypeID": "namespace:reference-data--SampleType:Fluid:",
                  "SampleDisposalInstructionID": "namespace:work-product-component--Document:0e6a8fdb-0a0a-56db-955a-c62204c42cb0:",
                  "SampleAcquisition": {
                    "SampleAcquisitionJobID": "namespace:master-data--SampleAcquisitionJob:dr23383830303032991154:",
                    "SampleAcquisitionDetail": {
                      "VerticalMeasurement": {
                        "EffectiveDateTime": "2020-02-13T09:13:15.55Z",
                        "VerticalMeasurement": 12345.6,
                        "TerminationDateTime": "2020-02-13T09:13:15.55Z",
                        "VerticalMeasurementTypeID": "namespace:reference-data--VerticalMeasurementType:ArbitraryPoint:",
                        "VerticalMeasurementPathID": "namespace:reference-data--VerticalMeasurementPath:MD:",
                        "VerticalMeasurementSourceID": "namespace:reference-data--VerticalMeasurementSource:DRL:",
                        "WellboreTVDTrajectoryID": "namespace:work-product-component--WellboreTrajectory:WellboreTrajectory-911bb71f-06ab-4deb-8e68-b8c9229dc76b:",
                        "VerticalMeasurementUnitOfMeasureID": "namespace:reference-data--UnitOfMeasure:m:",
                        "VerticalCRSID": "namespace:reference-data--CoordinateReferenceSystem:BoundProjected:EPSG::32021_EPSG::15851:",
                        "VerticalReferenceID": "Example VerticalReferenceID",
                        "VerticalReferenceEntityID": "namespace:master-data--Rig:SomeUniqueRigID:",
                        "VerticalMeasurementDescription": "Example VerticalMeasurementDescription"
                      },
                      "TopDepth": 10000.0,
                      "BaseDepth": 20000.0,
                      "ToolKind": "Wireline Formation Tester",
                      "RunNumber": "22",
                      "WellboreID": "namespace:master-data--Wellbore:cz2334t678900d53844-4:",
                      "WellheadOperatingCondition": {
                        "Pressure": 1.0,
                        "Temperature": 15.0
                      },
                      "ContributingWellboreOpeningIDs": [
                        "namespace:master-data--WellboreOpening:SomeUniqueWellboreOpeningID:"
                      ],
                      "SeparatorOperatingCondition": {
                        "Pressure": 1.0,
                        "Temperature": 15.0
                      },
                      "SamplingPoint": {
                        "SamplingPointTypeID": "namespace:reference-data--SamplingPointType:FlowPort:",
                        "SamplingPointName": "VALVE:1723RR-01"
                      },
                      "CorrectedOilRate": 12345.6,
                      "CorrectedGasRate": 12345.6,
                      "CorrectedWaterRate": 12345.6,
                      "MeasuredOilRate": 12345.6,
                      "MeasuredGasRate": 12345.6,
                      "MeasuredWaterRate": 12345.6,
                      "FormationCondition": {
                        "Pressure": 120,
                        "Temperature": 60
                      },
                      "CorrectionRemarks": {
                        "RemarkSequenceNumber": 1,
                        "Remark": "Example Remark",
                        "RemarkSource": "Example Remark Source",
                        "RemarkDate": "2020-02-13"
                      },
                      "SampleCarrierSlotName": "Example Sample Carrier Slot Name",
                      "ToolSectionName": "Example Tool Section Name",
                      "SampleContainerCushionPressure": 12345.6,
                      "GrossFluidKindID": "namespace:reference-data--WellProductType:Gas:",
                      "FacilityEquipmentOperatingCondition": {
                        "Pressure": 1.0,
                        "Temperature": 15.0
                      },
                      "SiteID": "namespace:master-data--GenericSite:SomeUniqueGenericSiteID:",
                      "SampleRecoveredLengthActual": 12345.6,
                      "PreservationTypeID": "namespace:reference-data--CorePreservationType:ClingWrap:",
                      "SampleRecoveredLengthPlanned": 12345.6,
                      "AcquisitionCondition": {
                        "Pressure": 120,
                        "Temperature": 60
                      },
                      "AcquisitionGOR": 340.0,
                      "MudBaseTypeID": "namespace:reference-data--MudBaseType:Brine:",
                      "MudTracerTypeID": "namespace:reference-data--MudTracerType:SomeUniqueMudTracerTypeID:"
                    },
                    "SampleAcquisitionTypeID": "namespace:reference-data--SampleAcquisitionType:DownholeSampleAcquisition:",
                    "SampleAcquisitionContainerID": "namespace:master-data--SampleContainer:dr23383830303032991154:",
                    "AcquisitionStartDate": "2023-01-01T12:00:00Z",
                    "AcquisitionEndDate": "2023-01-01T12:00:00Z",
                    "Remarks": [
                      {
                        "RemarkSequenceNumber": 1,
                        "Remark": "Example Remark",
                        "RemarkSource": "Example Remark Source",
                        "RemarkDate": "2020-02-13"
                      }
                    ],
                    "CollectionServiceCompanyID": "namespace:master-data--Organisation:fg67383830303032991126:",
                    "HandlingServiceCompanyID": "namespace:master-data--Organisation:fg67383830303032991126:"
                  },
                  "Remarks": [
                    {
                      "Remark": "Shaker not functioning properly.",
                      "RemarkSource": "Mud Logger"
                    }
                  ],
                  "RecombinationSpecification": {
                    "RecombinationCondition": {
                      "Pressure": 120,
                      "Temperature": 60
                    },
                    "RecombinationGasOilRatio": {
                      "GasOilRatio": 34567,
                      "VolumeReferenceConditionGas": {
                        "Pressure": 14.7,
                        "Temperature": 60
                      },
                      "VolumeReferenceConditionOil": {
                        "Pressure": 200,
                        "Temperature": 69
                      }
                    },
                    "RecombinationSaturationPressure": 120.0,
                    "TargetSampleComposition": [
                      {
                        "SampleCompositionComponentID": "namespace:reference-data--SampleCompositionComponent:ETHANE:",
                        "MassFraction": 0.2,
                        "MoleFraction": 0.1
                      },
                      {
                        "SampleCompositionComponentID": "namespace:reference-data--SampleCompositionComponent:PENTANE:",
                        "MassFraction": 0.4,
                        "MoleFraction": 0.4
                      },
                      {
                        "SampleCompositionComponentID": "namespace:reference-data--SampleCompositionComponent:PENTANEPLUS:",
                        "MassFraction": 0.4,
                        "MoleFraction": 0.5
                      }
                    ],
                    "Remarks": [
                      {
                        "Remark": "Shaker not functioning properly.",
                        "RemarkSource": "Mud Logger"
                      }
                    ],
                    "RecombinedSampleFraction": [
                      {
                        "SampleCompositionComponentID": "namespace:reference-data--SampleCompositionComponent:1%25202%25204%2520TRIMETHYLBENZENE:",
                        "VolumeFraction": 0.2,
                        "MassFraction": 0.03,
                        "MoleFraction": 0.5
                      }
                    ]
                  },
                  "ParentSampleIDs": [
                    "namespace:master-data--Sample:b7d3735f-b720-5db2-88c9-771d396d8a4e:",
                    "namespace:master-data--Sample:c7d3735f-b720-5db2-88c9-771d396d8a4e:"
                  ],
                  "SamplePreparation": [
                    {
                      "SamplePreparationTypeID": "namespace:reference-data--SamplePreparationType:Crushed:",
                      "SamplePreparationMethodID": "namespace:reference-data--SamplePreparationMethod:WaterWash:",
                      "SamplePreparationCondition": {
                        "Pressure": 1.0,
                        "Temperature": 15.0
                      },
                      "SamplePreparationStartDate": "2020-02-13T09:13:15.55Z",
                      "SamplePreparationEndDate": "2020-02-13T09:13:15.55Z",
                      "Remarks": [
                        {
                          "RemarkSequenceNumber": 1,
                          "Remark": "Example Remark",
                          "RemarkSource": "Example Remark Source",
                          "RemarkDate": "2020-02-13"
                        }
                      ]
                    }
                  ],
                  "ExtensionProperties": {
                    
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/pvtmodel/{record_id}": {
      "get": {
        "tags": [
          "PVT Model"
        ],
        "summary": "Get Record",
        "description": "Get the latest version of `(rafsddms:wks:work-product-component--MultiPhaseFlowMeterCalibration:1.0.0|rafsddms:wks:work-product-component--PVTModel:1.0.0|rafsddms:wks:work-product-component--ComponentScenario:1.0.0|rafsddms:wks:work-product-component--BlackOilTable:1.0.0)` object by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_api_rafs_ddms_v2_pvtmodel__record_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(work-product-component--MultiPhaseFlowMeterCalibration|work-product-component--PVTModel|work-product-component--ComponentScenario|work-product-component--BlackOilTable):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Api Rafs Ddms V2 Pvtmodel  Record Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "PVT Model"
        ],
        "summary": "Soft Delete Record",
        "description": "Delete the `(rafsddms:wks:work-product-component--MultiPhaseFlowMeterCalibration:1.0.0|rafsddms:wks:work-product-component--PVTModel:1.0.0|rafsddms:wks:work-product-component--ComponentScenario:1.0.0|rafsddms:wks:work-product-component--BlackOilTable:1.0.0)` object by record id.<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "soft_delete_record_api_rafs_ddms_v2_pvtmodel__record_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(work-product-component--MultiPhaseFlowMeterCalibration|work-product-component--PVTModel|work-product-component--ComponentScenario|work-product-component--BlackOilTable):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/pvtmodel/{record_id}/versions": {
      "get": {
        "tags": [
          "PVT Model"
        ],
        "summary": "Get Record Versions",
        "description": "Get a list of `(rafsddms:wks:work-product-component--MultiPhaseFlowMeterCalibration:1.0.0|rafsddms:wks:work-product-component--PVTModel:1.0.0|rafsddms:wks:work-product-component--ComponentScenario:1.0.0|rafsddms:wks:work-product-component--BlackOilTable:1.0.0)` object versions by record id.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_versions_api_rafs_ddms_v2_pvtmodel__record_id__versions_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(work-product-component--MultiPhaseFlowMeterCalibration|work-product-component--PVTModel|work-product-component--ComponentScenario|work-product-component--BlackOilTable):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Versions Api Rafs Ddms V2 Pvtmodel  Record Id  Versions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/pvtmodel/{record_id}/versions/{version}": {
      "get": {
        "tags": [
          "PVT Model"
        ],
        "summary": "Get Record Specific Version",
        "description": "Get the given version of `(rafsddms:wks:work-product-component--MultiPhaseFlowMeterCalibration:1.0.0|rafsddms:wks:work-product-component--PVTModel:1.0.0|rafsddms:wks:work-product-component--ComponentScenario:1.0.0|rafsddms:wks:work-product-component--BlackOilTable:1.0.0)` object.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_record_specific_version_api_rafs_ddms_v2_pvtmodel__record_id__versions__version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version"
            },
            "name": "version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(work-product-component--MultiPhaseFlowMeterCalibration|work-product-component--PVTModel|work-product-component--ComponentScenario|work-product-component--BlackOilTable):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Record Specific Version Api Rafs Ddms V2 Pvtmodel  Record Id  Versions  Version  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/pvtmodel": {
      "post": {
        "tags": [
          "PVT Model"
        ],
        "summary": "Post Records",
        "description": "Create or update `(rafsddms:wks:work-product-component--MultiPhaseFlowMeterCalibration:1.0.0|rafsddms:wks:work-product-component--PVTModel:1.0.0|rafsddms:wks:work-product-component--ComponentScenario:1.0.0|rafsddms:wks:work-product-component--BlackOilTable:1.0.0)` record(s).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_records_api_rafs_ddms_v2_pvtmodel_post",
        "parameters": [
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "type": "object"
                },
                "type": "array",
                "title": "Request Records"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUpsertResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/pvtmodel/{record_id}/data/{analysis_type}/{dataset_id}": {
      "get": {
        "tags": [
          "PVT Model"
        ],
        "summary": "Get Data V2",
        "description": "Get the (`latest version`) bulk data for a given `{analysis_type}` object by record id. <br><br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>            The  `columns_filter`, `rows_filter`, and  `columns_aggregation`                 query parameters can be used to manage data in response.<br><br>        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "get_data_v2_api_rafs_ddms_v2_pvtmodel__record_id__data__analysis_type___dataset_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(work-product-component--MultiPhaseFlowMeterCalibration|work-product-component--PVTModel|work-product-component--ComponentScenario|work-product-component--BlackOilTable):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Analysis Type"
            },
            "name": "analysis_type",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "[\\w\\-\\.]+:dataset--File.Generic:[\\w\\-\\d\\.]+:?[\\w\\-\\.\\:\\%]*",
              "title": "Dataset Id"
            },
            "name": "dataset_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Filter"
            },
            "example": "PropertyX,PropertyY,PropertyZ",
            "name": "columns_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Rows Filter"
            },
            "example": "PropertyX[.PropertyXFieldA],gt,4000",
            "name": "rows_filter",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Columns Aggregation"
            },
            "example": "PropertyX[.PropertyXFieldA],avg",
            "name": "columns_aggregation",
            "in": "query"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    },
    "/api/rafs-ddms/v2/pvtmodel/{record_id}/data/{analysis_type}": {
      "post": {
        "tags": [
          "PVT Model"
        ],
        "summary": "Post Data V2",
        "description": "Upload the bulk data for a given `{analysis_type}` object by record id.<br>            It creates a new version of the record. <br>            The previous meta-data with bulk data is available by their `versions`. <br> <br>            Use the `Content-Type` request header to specify payload and response formats                 (`application/json` and `application/parquet` are supported).<br>            Use the `Accept` request header to specify content schema version                 (example header `Accept: */*;version=1.0.0` is supported).<br><br>        Required roles: `users.datalake.editors` or `users.datalake.admins`.<br>         In addition, users must be members of a data group(ACL) to access the data.",
        "operationId": "post_data_v2_api_rafs_ddms_v2_pvtmodel__record_id__data__analysis_type__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[\\w\\-\\.]+:(work-product-component--MultiPhaseFlowMeterCalibration|work-product-component--PVTModel|work-product-component--ComponentScenario|work-product-component--BlackOilTable):[\\w\\-\\.\\:\\%]+$",
              "title": "Record Id"
            },
            "name": "record_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Analysis Type"
            },
            "name": "analysis_type",
            "in": "path"
          },
          {
            "description": "Specifies the proper data partition id",
            "required": true,
            "schema": {
              "title": "data-partition-id",
              "description": "Specifies the proper data partition id"
            },
            "example": "opendes",
            "name": "data-partition-id",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post Data V2 Api Rafs Ddms V2 Pvtmodel  Record Id  Data  Analysis Type  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": [
              
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Acl": {
        "properties": {
          "viewers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Viewers"
          },
          "owners": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Owners"
          }
        },
        "type": "object",
        "required": [
          "viewers",
          "owners"
        ],
        "title": "Acl"
      },
      "HTTPValidationError": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "app_name": "Errors"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InfoResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "app_version": {
            "type": "string",
            "title": "App Version"
          },
          "build_time": {
            "type": "string",
            "title": "Build Time"
          },
          "branch": {
            "type": "string",
            "title": "Branch"
          },
          "commit_id": {
            "type": "string",
            "title": "Commit Id"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit Message"
          },
          "release_version": {
            "type": "string",
            "title": "Release Version"
          }
        },
        "type": "object",
        "title": "InfoResponse"
      },
      "Legal": {
        "properties": {
          "legaltags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Legaltags"
          },
          "otherRelevantDataCountries": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Otherrelevantdatacountries"
          },
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "legaltags",
          "otherRelevantDataCountries"
        ],
        "title": "Legal"
      },
      "OsduStorageRecord": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "kind": {
            "type": "string",
            "title": "Kind"
          },
          "acl": {
            "$ref": "#/components/schemas/Acl"
          },
          "legal": {
            "$ref": "#/components/schemas/Legal"
          },
          "data": {
            "type": "object",
            "title": "Data"
          },
          "meta": {
            "items": {
              
            },
            "type": "array",
            "title": "Meta"
          },
          "ancestry": {
            "type": "object",
            "title": "Ancestry"
          },
          "tags": {
            "type": "object",
            "title": "Tags"
          },
          "version": {
            "type": "integer",
            "title": "Version"
          },
          "createUser": {
            "type": "string",
            "title": "Createuser"
          },
          "createTime": {
            "type": "string",
            "title": "Createtime"
          },
          "modifyUser": {
            "type": "string",
            "title": "Modifyuser"
          },
          "modifyTime": {
            "type": "string",
            "title": "Modifytime"
          }
        },
        "type": "object",
        "required": [
          "kind",
          "acl",
          "legal",
          "data"
        ],
        "title": "OsduStorageRecord"
      },
      "StorageUpsertResponse": {
        "properties": {
          "record_count": {
            "type": "integer",
            "title": "Record Count"
          },
          "record_id_versions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Record Id Versions"
          },
          "skipped_record_count": {
            "type": "integer",
            "title": "Skipped Record Count"
          }
        },
        "type": "object",
        "required": [
          "record_count",
          "record_id_versions",
          "skipped_record_count"
        ],
        "title": "StorageUpsertResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "app_name": "Location"
          },
          "msg": {
            "type": "string",
            "app_name": "Message"
          },
          "type": {
            "type": "string",
            "app_name": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
